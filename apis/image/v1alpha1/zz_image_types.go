// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CategoriesInitParameters struct {

	// The name for the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CategoriesObservation struct {

	// The name for the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CategoriesParameters struct {

	// The name for the image.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ClusterReferencesInitParameters struct {

	// The kind name (Default value: project).
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// image UUID.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ClusterReferencesObservation struct {

	// The kind name (Default value: project).
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The name for the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// image UUID.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ClusterReferencesParameters struct {

	// The kind name (Default value: project).
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// image UUID.
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type CurrentClusterReferenceListInitParameters struct {
}

type CurrentClusterReferenceListObservation struct {

	// The kind name (Default value: project).
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The name for the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// image UUID.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type CurrentClusterReferenceListParameters struct {
}

type ImageInitParameters struct {

	// The supported CPU architecture for a disk image.
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The reference to a availability_zone.
	// +mapType=granular
	AvailabilityZoneReference map[string]*string `json:"availabilityZoneReference,omitempty" tf:"availability_zone_reference,omitempty"`

	// Categories for the image.
	Categories []CategoriesInitParameters `json:"categories,omitempty" tf:"categories,omitempty"`

	// Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	// +mapType=granular
	Checksum map[string]*string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	ClusterReferences []ClusterReferencesInitParameters `json:"clusterReferences,omitempty" tf:"cluster_references,omitempty"`

	// A description for image.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of image.
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// The reference to a user.
	// +mapType=granular
	OwnerReference map[string]*string `json:"ownerReference,omitempty" tf:"owner_reference,omitempty"`

	// The reference to a project.
	// +mapType=granular
	ProjectReference map[string]*string `json:"projectReference,omitempty" tf:"project_reference,omitempty"`

	// A local path to upload an image.
	SourcePath *string `json:"sourcePath,omitempty" tf:"source_path,omitempty"`

	// The source URI points at the location of the source image which is used to create/update image.
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`

	// The image version.
	// +mapType=granular
	Version map[string]*string `json:"version,omitempty" tf:"version,omitempty"`
}

type ImageObservation struct {

	// The version of the API.
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	// The supported CPU architecture for a disk image.
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The reference to a availability_zone.
	// +mapType=granular
	AvailabilityZoneReference map[string]*string `json:"availabilityZoneReference,omitempty" tf:"availability_zone_reference,omitempty"`

	// Categories for the image.
	Categories []CategoriesObservation `json:"categories,omitempty" tf:"categories,omitempty"`

	// Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	// +mapType=granular
	Checksum map[string]*string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// The name for the image.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	ClusterReferences []ClusterReferencesObservation `json:"clusterReferences,omitempty" tf:"cluster_references,omitempty"`

	// image UUID.
	ClusterUUID *string `json:"clusterUuid,omitempty" tf:"cluster_uuid,omitempty"`

	CurrentClusterReferenceList []CurrentClusterReferenceListObservation `json:"currentClusterReferenceList,omitempty" tf:"current_cluster_reference_list,omitempty"`

	// A description for image.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The type of image.
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// The image kind metadata.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The reference to a user.
	// +mapType=granular
	OwnerReference map[string]*string `json:"ownerReference,omitempty" tf:"owner_reference,omitempty"`

	// The reference to a project.
	// +mapType=granular
	ProjectReference map[string]*string `json:"projectReference,omitempty" tf:"project_reference,omitempty"`

	// List of URIs where the raw image data can be accessed.
	RetrievalURIList []*string `json:"retrievalUriList,omitempty" tf:"retrieval_uri_list,omitempty"`

	// The size of the image in bytes.
	SizeBytes *float64 `json:"sizeBytes,omitempty" tf:"size_bytes,omitempty"`

	// A local path to upload an image.
	SourcePath *string `json:"sourcePath,omitempty" tf:"source_path,omitempty"`

	// The source URI points at the location of the source image which is used to create/update image.
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`

	// The state of the image.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The image version.
	// +mapType=granular
	Version map[string]*string `json:"version,omitempty" tf:"version,omitempty"`
}

type ImageParameters struct {

	// The supported CPU architecture for a disk image.
	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The reference to a availability_zone.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AvailabilityZoneReference map[string]*string `json:"availabilityZoneReference,omitempty" tf:"availability_zone_reference,omitempty"`

	// Categories for the image.
	// +kubebuilder:validation:Optional
	Categories []CategoriesParameters `json:"categories,omitempty" tf:"categories,omitempty"`

	// Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Checksum map[string]*string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterReferences []ClusterReferencesParameters `json:"clusterReferences,omitempty" tf:"cluster_references,omitempty"`

	// A description for image.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of image.
	// +kubebuilder:validation:Optional
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// The reference to a user.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	OwnerReference map[string]*string `json:"ownerReference,omitempty" tf:"owner_reference,omitempty"`

	// The reference to a project.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ProjectReference map[string]*string `json:"projectReference,omitempty" tf:"project_reference,omitempty"`

	// A local path to upload an image.
	// +kubebuilder:validation:Optional
	SourcePath *string `json:"sourcePath,omitempty" tf:"source_path,omitempty"`

	// The source URI points at the location of the source image which is used to create/update image.
	// +kubebuilder:validation:Optional
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`

	// The image version.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Version map[string]*string `json:"version,omitempty" tf:"version,omitempty"`
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageInitParameters `json:"initProvider,omitempty"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Image is the Schema for the Images API. Provides a Nutanix Image resource to Create a Image.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nutanix}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageSpec   `json:"spec"`
	Status            ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
