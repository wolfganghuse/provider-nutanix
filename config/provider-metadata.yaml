name: nutanix/nutanix
resources:
    nutanix_access_control_policy:
        subCategory: ""
        description: This operation submits a request to create an access control policy based on the input parameters.
        name: nutanix_access_control_policy
        title: nutanix_access_control_policy
        examples:
            - name: test
              manifest: |-
                {
                  "context_filter_list": [
                    {
                      "entity_filter_expression_list": [
                        {
                          "left_hand_side_entity_type": "cluster",
                          "operator": "IN",
                          "right_hand_side": [
                            {
                              "uuid_list": [
                                "00058ef8-c31c-f0bc-0000-000000007b23"
                              ]
                            }
                          ]
                        },
                        {
                          "left_hand_side_entity_type": "image",
                          "operator": "IN",
                          "right_hand_side": [
                            {
                              "collection": "ALL"
                            }
                          ]
                        },
                        {
                          "left_hand_side_entity_type": "category",
                          "operator": "IN",
                          "right_hand_side": [
                            {
                              "collection": "ALL"
                            }
                          ]
                        },
                        {
                          "left_hand_side_entity_type": "marketplace_item",
                          "operator": "IN",
                          "right_hand_side": [
                            {
                              "collection": "SELF_OWNED"
                            }
                          ]
                        },
                        {
                          "left_hand_side_entity_type": "app_task",
                          "operator": "IN",
                          "right_hand_side": [
                            {
                              "collection": "SELF_OWNED"
                            }
                          ]
                        },
                        {
                          "left_hand_side_entity_type": "app_variable",
                          "operator": "IN",
                          "right_hand_side": [
                            {
                              "collection": "SELF_OWNED"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "description": "DESCRIPTION OF THE ACCESS CONTROL POLICY",
                  "name": "NAME OF ACCESS CONTROL POLICY",
                  "role_reference": [
                    {
                      "kind": "role",
                      "uuid": "UUID of role"
                    }
                  ],
                  "user_reference_list": [
                    {
                      "name": "admin",
                      "uuid": "UUID of User existent"
                    }
                  ]
                }
        argumentDocs:
            api_version: '- The version of the API.'
            categories: ': - (Optional) Categories for the Access Control Policy.'
            collection: ': - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.'
            context_list: ': - (Optional) The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. NOTE: - the absence of a scope expression in a filter implies global context.'
            creation_time: ': - UTC date and time in RFC-3339 format when Access Control Policy was created.'
            description: ': - (Optional) The description of Access Control Policy.'
            entity_filter_expression_list: '- (Required) A list of Entity filter expressions.'
            filter_list: ': - (Optional) The list of filters, which define the entities.'
            kind: ': - The kind name (Default value: project)(Required).'
            last_update_time: ': - UTC date and time in RFC-3339 format when Access Control Policy was last updated.'
            left_hand_side: ': - (Optional)  The LHS of the filter expression - the scope type.'
            left_hand_side_entity_type: ': - (Optional)  The LHS of the filter expression - the entity type.'
            metadata: ': - The Access Control Policy kind metadata.'
            name: ': - (Optional) Name of the Access Control Policy.'
            operator: ': - (Required) The operator of the filter expression.'
            owner_reference: ': - (Optional) The reference to a user.'
            project_reference: ': - (Optional) The reference to a project.'
            right_hand_side: ': - (Required) The right hand side (RHS) of an scope expression.'
            role_reference: ': - (Required) The reference to a role.'
            scope_filter_expression_list: ': - (Optional) Filter the scope of an Access Control Policy.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - The state of the Access Control Policy.'
            user_group_reference_list: ': - (Optional) The User group(s) being assigned a given role.'
            user_reference_list: ': - (Optional) The User(s) being assigned a given role.'
            uuid: ': - Access Control Policy UUID.'
            uuid_list: ': - (Optional) The explicit list of UUIDs for the given kind.'
            value: ': - value of the key.'
        importStatements: []
    nutanix_address_group:
        subCategory: ""
        description: This operation submits a request to create a address group based on the input parameters.
        name: nutanix_address_group
        title: nutanix_address_group
        examples:
            - name: test_address
              manifest: |-
                {
                  "description": "test address groups resource",
                  "ip_address_block_list": [
                    {
                      "ip": "10.0.0.0",
                      "prefix_length": 24
                    }
                  ],
                  "name": "test"
                }
        argumentDocs:
            address_group_string: ': - (ReadOnly) Address Group string'
            description: ': - (Optional) Description of the service group'
            ip: ': - (Required) IP of the address block'
            ip_address_block_list: ': - (Required) list of IP address blocks with their prefix length'
            name: ': - (Required) Name of the service group'
            prefix_length: ': - (Required) Prefix length of address block in int'
        importStatements: []
    nutanix_category_key:
        subCategory: ""
        description: Provides a Nutanix Category key resource to Create a category key name.
        name: nutanix_category_key
        title: nutanix_category_key
        examples:
            - name: test
              manifest: |-
                {
                  "description": "App Support Category Key",
                  "name": "app-support-example"
                }
        argumentDocs:
            api_version: '- (Optional) The version of the API.'
            description: ': - (Optional) A description for category key.'
            name: ': - (Required) The name for the category key.'
            system_defined: ': - Specifying whether its a system defined category.'
        importStatements: []
    nutanix_category_value:
        subCategory: ""
        description: Provides a Nutanix Category value resource to Create a category value.
        name: nutanix_category_value
        title: nutanix_category_value
        examples:
            - name: test
              manifest: |-
                {
                  "description": "Test Category Value",
                  "name": "${nutanix_category_key.test-category-key.id}",
                  "value": "test-value"
                }
              references:
                name: nutanix_category_key.test-category-key.id
              dependencies:
                nutanix_category_key.test-category-key: |-
                    {
                      "description": "App Support Category Key",
                      "name": "app-support-1"
                    }
        argumentDocs:
            api_version: '- (Optional) The version of the API.'
            description: ': - (Optional) A description for category value.'
            name: ': - (Required) The category_key name for the category value.'
            system_defined: ': - Specifying whether its a system defined category.'
            value: '- (Required) The value for the category value.'
        importStatements: []
    nutanix_floating_ip:
        subCategory: ""
        description: Create Floating IPs .
        name: nutanix_floating_ip
        title: nutanix_floating_ip
        examples:
            - name: fip1
              manifest: |-
                {
                  "external_subnet_reference_uuid": "{{ext_sub_uuid}}"
                }
            - name: fip2
              manifest: |-
                {
                  "external_subnet_reference_name": "{{ext_sub_name}}",
                  "private_ip": "{{ip_address}}",
                  "vpc_reference_name": "{{vpc_name}}"
                }
        argumentDocs:
            UUID: ': - subnet UUID.'
            api_version: '- The version of the API.'
            creation_time: ': - UTC date and time in RFC-3339 format when subnet was created.'
            external_subnet_reference_name: |-
                - (Optional) The reference to a subnet. Should not be used with
                {external_subnet_reference_uuid} .
            external_subnet_reference_uuid: '- (Optional) The reference to a subnet. Should not be used with {external_subnet_reference_name} .'
            last_update_time: ': - UTC date and time in RFC-3339 format when subnet was last updated.'
            metadata: '- The floating_ips kind metadata.'
            name: ': - subnet name.'
            private_ip: '- (Optional) Private IP with which floating IP is associated. Should be used with vpc_reference .'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            vm_nic_reference_uuid: '- (Optional) The reference to a vm_nic .'
            vpc_reference_name: '- (Optional) The reference to a vpc. Should not be used with {vpc_reference_uuid}.'
            vpc_reference_uuid: '- (Optional) The reference to a vpc. Should not be used with {vpc_reference_name}.'
        importStatements: []
    nutanix_foundation_central_api_keys:
        subCategory: ""
        description: Create a new api key which will be used by remote nodes to authenticate with Foundation Central .
        name: nutanix_foundation_central_api_keys
        title: nutanix_foundation_central_api_keys
        examples:
            - name: new_api_key
              manifest: |-
                {
                  "alias": "\u003cNAME-FOR-API-KEY\u003e"
                }
        argumentDocs:
            alias: ': - (Required) Alias for the api key to be created.'
            api_key: ': Api key in string format.'
            created_timestamp: ': Time when the api key was created.'
            current_time: ': Current time of Foundation Central.'
            key_uuid: ': UUID of the api key.'
        importStatements: []
    nutanix_foundation_central_image_cluster:
        subCategory: ""
        description: Image Nodes and Create a cluster out of nodes registered with Foundation Central.
        name: nutanix_foundation_central_image_cluster
        title: nutanix_foundation_central_image_cluster
        examples:
            - name: img2
              manifest: |-
                {
                  "aos_package_url": "\u003cURL\u003e",
                  "cluster_external_ip": "\u003cCLUSTER-IP\u003e",
                  "cluster_name": "test-FC",
                  "common_network_settings": [
                    {
                      "cvm_dns_servers": [
                        "xx.x.xx.xx"
                      ],
                      "cvm_ntp_servers": [
                        "\u003ccvm-ntp\u003e"
                      ],
                      "hypervisor_dns_servers": [
                        "xx.x.xx.xx"
                      ],
                      "hypervisor_ntp_servers": [
                        "\u003chypervisor-ntp\u003e"
                      ]
                    }
                  ],
                  "node_list": [
                    {
                      "cvm_gateway": "10.xx.xx.xx",
                      "cvm_ip": "10.x.xx.xx",
                      "cvm_netmask": "xx.xx.xx.xx",
                      "hardware_attributes_override": {
                        "default_workload": "vdi",
                        "lcm_family": "smc_gen_10",
                        "maybe_1GbE_only": true,
                        "robo_mixed_hypervisor": true
                      },
                      "hypervisor_gateway": "10.x.x.xx",
                      "hypervisor_hostname": "HOST-1",
                      "hypervisor_ip": "10.x.xx.xx",
                      "hypervisor_netmask": "xx.xx.xx.xx",
                      "hypervisor_type": "kvm",
                      "image_now": true,
                      "imaged_node_uuid": "\u003cNODE-UUID\u003e",
                      "ipmi_gateway": "10.x.xx.xx",
                      "ipmi_ip": "10.x.xx.xx",
                      "ipmi_netmask": "10.x.xx.xx",
                      "use_existing_network_settings": false
                    },
                    {
                      "cvm_gateway": "10.xx.xx.xx",
                      "cvm_ip": "10.x.xx.xx",
                      "cvm_netmask": "xx.xx.xx.xx",
                      "hypervisor_gateway": "10.x.x.xx",
                      "hypervisor_hostname": "HOST-2",
                      "hypervisor_ip": "10.x.xx.xx",
                      "hypervisor_netmask": "xx.xx.xx.xx",
                      "hypervisor_type": "kvm",
                      "image_now": true,
                      "imaged_node_uuid": "\u003cNODE-UUID\u003e",
                      "ipmi_gateway": "10.x.xx.xx",
                      "ipmi_ip": "10.x.xx.xx",
                      "ipmi_netmask": "10.x.xx.xx",
                      "use_existing_network_settings": false
                    },
                    {
                      "cvm_gateway": "10.xx.xx.xx",
                      "cvm_ip": "10.x.xx.xx",
                      "cvm_netmask": "xx.xx.xx.xx",
                      "hypervisor_gateway": "10.x.x.xx",
                      "hypervisor_hostname": "HOST-3",
                      "hypervisor_ip": "10.x.xx.xx",
                      "hypervisor_netmask": "xx.xx.xx.xx",
                      "hypervisor_type": "kvm",
                      "image_now": true,
                      "imaged_node_uuid": "\u003cNODE-UUID\u003e",
                      "ipmi_gateway": "10.x.xx.xx",
                      "ipmi_ip": "10.x.xx.xx",
                      "ipmi_netmask": "10.x.xx.xx",
                      "use_existing_network_settings": false
                    }
                  ],
                  "redundancy_factor": 2,
                  "skip_cluster_creation": true
                }
        argumentDocs:
            Update: ': - Resource will trigger new resource create call for any kind of update in resource config.'
            aos_package_sha256sum: ': Sha256sum of AOS package.'
            aos_package_url: ': URL to download AOS package. Required only if imaging is needed.'
            cluster_external_ip: ': External management ip of the cluster.'
            cluster_name: ': Name of the cluster.'
            cluster_size: ': Number of nodes in the cluster.'
            common_network_settings: ': Common network settings across the nodes in the cluster.'
            cvm_dns_servers: ': List of dns servers for the cvms in the cluster.'
            cvm_gateway: ': Gateway of the cvm.'
            cvm_ip: ': IP address to be set for the cvm on the node.'
            cvm_netmask: ': Netmask of the cvm.'
            cvm_ntp_servers: ': List of ntp servers for the cvms in the cluster.'
            cvm_ram_gb: ': Amount of memory to be assigned for the cvm.'
            cvm_vlan_id: ': Vlan tag of the cvm, if the cvm is on a vlan.'
            delete: ': - Resource will be deleted from Foundation Central deployment history. For Actual Cluster delete , manually destroy the cluster.'
            hardware_attributes_override: ': Hardware attributes override json for the node.'
            hyperv_product_key: ': Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).'
            hyperv_sku: ': SKU of hyperv to be installed if hypervisor_type is hyperv.'
            hypervisor_dns_servers: ': List of dns servers for the hypervisors in the cluster.'
            hypervisor_gateway: ': Gateway of the hypervisor.'
            hypervisor_hostname: ': Name to be set for the hypervisor host.'
            hypervisor_ip: ': IP address to be set for the hypervisor on the node.'
            hypervisor_iso_details: ': Details of the hypervisor iso.'
            hypervisor_netmask: ': Netmask of the hypervisor.'
            hypervisor_ntp_servers: ': List of ntp servers for the hypervisors in the cluster.'
            hypervisor_type: ': Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.'
            image_now: ': True, if the node should be imaged, False, otherwise.'
            imaged_cluster_uuid: ': Unique id of the cluster.'
            imaged_node_uuid: ': UUID of the node.'
            ipmi_gateway: ': Gateway of the ipmi.'
            ipmi_ip: ': IP address to be set for the ipmi of the node.'
            ipmi_netmask: ': Netmask of the ipmi.'
            nodes_list: ': List of details of nodes out of which the cluster needs to be created.'
            rdma_passthrough: ': Passthrough RDMA nic to CVM if possible, default to false.'
            redundancy_factor: ': Redundancy factor of the cluster.'
            sha256sum: ': sha256sum of the hypervisor iso.'
            storage_node_count: ': Number of storage only nodes in the cluster. AHV iso for storage node will be taken from aos package.'
            timezone: ': Timezone to be set on the cluster.'
            url: ': (Required) URL to download hypervisor iso. Required only if imaging is needed.'
            use_existing_network_settings: ': Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.'
        importStatements: []
    nutanix_foundation_image:
        subCategory: ""
        description: Uploads hypervisor or AOS image to foundation.
        name: nutanix_foundation_image
        title: nutanix_foundation_image
        examples:
            - name: nos-image
              manifest: |-
                {
                  "filename": "nos_image.tar",
                  "installer_type": "nos",
                  "source": "../../../files/nutanix_installer_x86_64.tar"
                }
            - name: hypervisor-image
              manifest: |-
                {
                  "filename": "esx_image.iso",
                  "installer_type": "esx",
                  "source": "../../../files/VMware-Installer.x86_64.iso"
                }
        argumentDocs:
            Update: ': - Resource will trigger new resource create call for any kind of update in resource config and delete existing image from foundation vm.'
            filename: ': - (Required) Name of installer file to be kept in foundation vm.'
            in_whitelist: :- If hypervisor ISO is in whitelist.
            installer_type: ': - (Required) One of "kvm", "esx", "hyperv", "xen", or "nos".'
            md5sum: ': - md5sum of the ISO.'
            name: :- file location in foundation vm
            source: ': - (Required) Complete path to the file in machine where the .tf  files runs.'
        importStatements: []
    nutanix_foundation_image_nodes:
        subCategory: ""
        description: Images node(s) and optionally creates clusters.
        name: nutanix_foundation_image_nodes
        title: nutanix_foundation_image_nodes
        examples:
            - name: batch1
              manifest: |-
                {
                  "blocks": [
                    {
                      "block_id": "999999999",
                      "nodes": [
                        {
                          "cvm_gb_ram": 50,
                          "cvm_ip": "10.xx.xx.xx",
                          "hypervisor": "kvm",
                          "hypervisor_hostname": "batman-1",
                          "hypervisor_ip": "10.xx.xx.xx",
                          "image_now": true,
                          "ipmi_ip": "10.xx.xx.xx",
                          "ipmi_password": "10.xx.xx.xx",
                          "ipmi_user": "ADMIN",
                          "node_position": "A"
                        },
                        {
                          "current_network_interface": "eth0",
                          "cvm_gb_ram": 51,
                          "cvm_ip": "10.xx.xx.xx",
                          "cvm_num_vcpus": 10,
                          "device_hint": "vm_installer",
                          "hypervisor": "kvm",
                          "hypervisor_hostname": "batman-2",
                          "hypervisor_ip": "10.xx.xx.xx",
                          "image_now": true,
                          "ipmi_ip": "10.xx.xx.xx",
                          "ipv6_address": "ffff::ffff:ffff:ffff:ffff%eth0",
                          "node_position": "B"
                        },
                        {
                          "current_network_interface": "eth0",
                          "cvm_gb_ram": 51,
                          "cvm_ip": "10.xx.xx.xx",
                          "cvm_num_vcpus": 10,
                          "device_hint": "vm_installer",
                          "hypervisor": "kvm",
                          "hypervisor_hostname": "batman-3",
                          "hypervisor_ip": "10.xx.xx.xx",
                          "image_now": true,
                          "ipmi_ip": "10.xx.xx.xx",
                          "ipv6_address": "ffff::ffff:ffff:ffff:ffff%eth0",
                          "node_position": "C"
                        }
                      ]
                    },
                    {
                      "block_id": "99999999",
                      "nodes": [
                        {
                          "current_network_interface": "eth2",
                          "cvm_gb_ram": 51,
                          "cvm_ip": "10.xx.xx.xx",
                          "cvm_num_vcpus": 10,
                          "device_hint": "vm_installer",
                          "hypervisor": "esx",
                          "hypervisor_hostname": "superman-1",
                          "hypervisor_ip": "10.xx.xx.xx",
                          "image_now": true,
                          "ipmi_ip": "10.xx.xx.xx",
                          "ipv6_address": "ffff::ffff:ffff:ffff:ffff%eth0",
                          "node_position": "D"
                        }
                      ]
                    }
                  ],
                  "clusters": [
                    {
                      "cluster_external_ip": "10.xx.xx.xx",
                      "cluster_init_now": true,
                      "cluster_members": [
                        "10.xx.xx.xx"
                      ],
                      "cluster_name": "superman",
                      "redundancy_factor": 1,
                      "single_node_cluster": true
                    },
                    {
                      "cluster_external_ip": "10.xx.xx.xx",
                      "cluster_init_now": true,
                      "cluster_members": [
                        "10.xx.xx.xx",
                        "10.xx.xx.xx",
                        "10.xx.xx.xx"
                      ],
                      "cluster_name": "batman",
                      "redundancy_factor": 2,
                      "timezone": "Africa/Conakry"
                    }
                  ],
                  "cvm_gateway": "10.xx.xx.xx",
                  "cvm_netmask": "10.xx.xx.xx",
                  "hypervisor_gateway": "10.xx.xx.xx",
                  "hypervisor_iso": [
                    {
                      "esx": [
                        {
                          "checksum": "aasjdajkdsa8sdjnwj2902djncsdc93",
                          "filename": "${esx_image.iso}"
                        }
                      ]
                    }
                  ],
                  "hypervisor_netmask": "10.xx.xx.xx",
                  "ipmi_gateway": "10.xx.xx.xx",
                  "ipmi_netmask": "10.xx.xx.xx",
                  "nos_package": "nos_package.tar",
                  "timeouts": [
                    {
                      "create": "65m"
                    }
                  ]
                }
              references:
                hypervisor_iso.esx.filename: esx_image.iso
        argumentDocs:
            Update: ': - Resource will trigger new resource create call for any kind of update in resource config.'
            block_id: ': - Block ID.'
            blocks: ': - (Required) Terraform blocks of Block level parameters.'
            checksum: :- (Required) Filename of hypervisor ISO.
            cluster_urls: :- list containing cluster name and cluster urls for created clusters in current session
            cluster_urls.#.cluster_name: :- cluster_name
            cluster_urls.#.cluster_url: :- url to access the cluster login
            clusters: ': - Terraform blocks of clusters config'
            clusters.backplane_netmask: ': - Backplane netmask.'
            clusters.backplane_subnet: ': - Backplane subnet address.'
            clusters.backplane_vlan: ': - Backplane vlan.'
            clusters.cluster_external_ip: ': - External IP of the cluster.'
            clusters.cluster_init_now: ': - (Optional, Default = true) If cluster should be created.'
            clusters.cluster_init_successful: ': - If cluster initialization was successful.'
            clusters.cluster_members: ': - (Required) Members in the cluster.'
            clusters.cluster_name: ': - (Required) Name of the cluster.'
            clusters.cvm_dns_servers: ': - DNS servers of CVM.'
            clusters.cvm_ntp_servers: ': - NTP servers of CVM.'
            clusters.enable_ns: ': - If network segmentation should be enabled.'
            clusters.hypervisor_ntp_servers: ': - NTP servers of hypervisor.'
            clusters.redundancy_factor: ': - (Required) Cluster Redundancy Factor.'
            clusters.single_node_cluster: ': - If it is a single node cluster.'
            clusters.timezone: ': - Set timezone for every CVM'
            cvm_gateway: ': - (Required) CVM gateway.'
            cvm_netmask: ': - (Required) CVM netmask.'
            delete: ': - Delete will be a soft delete.'
            eos_metadata: ': - Contains user data from Eos portal.'
            eos_metadata.account_name: ': - arrya of account names'
            eos_metadata.config_id: ': - Id of the Eos config uploaded in foundation GUI.'
            eos_metadata.email: ': - Email address of the user who downloaded Eos config.'
            fc_settings: ': - Foundation Central specific settings.'
            fc_settings.fc_metadata: :- Foundation Central metadata which will be transferred to the newly imaged node.
            fc_settings.fc_metadata.api_key: :- api_key which the node uses to register itself with foundation central.
            fc_settings.fc_metadata.fc_ip: :- IP address of foundation central.
            fc_settings.foundation_central: :- If this attribute is set to True, FC workflow will be invoked.
            filename: :- (Required) Checksum for ISO file.
            hyperv_external_vnic: ': - Hyperv External virtual network adapter name.'
            hyperv_external_vswitch: ': - Hyperv External vswitch name.'
            hyperv_product_key: ': - Hyperv product key.'
            hyperv_sku: ': - Hyperv SKU.'
            hypervisor_gateway: ': - (Required) Hypervisor gateway.'
            hypervisor_iso: ': - Hypervisor ISO.'
            hypervisor_iso.esx: ': - Details of hypervisor ISO of type esx.'
            hypervisor_iso.hyperv: ': - Details of hypervisor ISO of type hyperv.'
            hypervisor_iso.kvm: ': - Details of hypervisor ISO of type kvm.'
            hypervisor_iso.xen: ': - Details of hypervisor ISO of type xen.'
            hypervisor_name_server: ': - Hypervisor nameserver.'
            hypervisor_netmask: ': - (Required) Hypervisor netmask.'
            hypervisor_password: ': - Hypervisor password.'
            id: ': - unique id of terraform resouce is set to session_id of the imaging session'
            install_script: ': - install script.'
            ipmi_gateway: ': - (Required incase using IPMI based imaging either here or inside node spec) default IPMI gateway'
            ipmi_netmask: ': - (Required incase using IPMI based imaging either here or inside node spec) default IPMI netmask'
            ipmi_password: ': - (Required incase using IPMI based imaging either here or inside node spec) IPMI password.'
            ipmi_user: ': - (Required incase using IPMI based imaging either here or inside node spec) IPMI username.'
            layout_egg_uuid: ': - Id of the custom layout which needs to be passed to imaging request.'
            nodes: :- (Required) Terraform blocks of details of nodes
            nodes.bond_lacp_rate: :- (Required if node is lacp configured) slow or fast if lacp if being used at the switch
            nodes.bond_mode: :- (Required if node is capable) dynamic if using LACP, static for LAG
            nodes.bond_uplinks: :- MAC Addresses of NICs in a team/bond
            nodes.cluster_id: :- ID of cluster.
            nodes.current_cvm_vlan_tag: :- Current CVM vlan tag. 0 Value with remove vlan tag.
            nodes.current_network_interface: :- CVM current network interface.
            nodes.cvm_gb_ram: :- RAM capacity of CVM in GB.
            nodes.cvm_num_vcpus: :- Number of CVM vcpus.
            nodes.device_hint: :- use "vm_installer" to enable CVM imaging from standalone.
            nodes.exlude_boot_serial: :- serial of boot device to be excluded (used by NX G6 platforms)
            nodes.hypervisor_hostname: :- (Required) Hypervisor Hostname.
            nodes.hypervisor_ip: :- (Required) Hypervisor IP address.
            nodes.image_delay: :- Imaging delay.
            nodes.image_now: :- (Optional, Default = true) If the node should be imaged now.
            nodes.ipmi_configure_now: :- Whether IPMI should be configured.
            nodes.ipmi_gateway: :- (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
            nodes.ipmi_ip: :- (Required) IPMI IP address.
            nodes.ipmi_mac: :- IPMI MAC address.
            nodes.ipmi_netmask: :- (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
            nodes.ipmi_password: :- (Required incase using IPMI based imaging either here or outside blocks) IPMI username
            nodes.ipmi_user: :- (Required incase using IPMI based imaging either here or outside blocks) IPMI password
            nodes.ipv6_address: :- (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
            nodes.ipv6_interface: :- (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
            nodes.mitigate_low_boot_space: :- relocate bootbank files to make space for phoenix files.
            nodes.node_position: :- (Required) Position of the node in the block.
            nodes.node_serial: :- serial number of the node.
            nodes.rdma_mac_addr: :- mac address of nic to be used for rdma
            nodes.rdma_passthrough: :- (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
            nodes.ucsm_managed_mode: :- UCSM Managed mode.
            nodes.ucsm_node_serial: :- UCSM node serial.
            nodes.ucsm_params: :- Object of UCSM parameters.
            nodes.ucsm_params.keep_ucsm_settings: :- Whether UCSM settings should be kept.
            nodes.ucsm_params.mac_pool: :- Mac address pool.
            nodes.ucsm_params.native_vlan: :- If the vlan is native.
            nodes.ucsm_params.vlan_name: :- Name of vlan.
            nodes.vswitches: :- Terraform blocks of vswitch configuration. Foundation will auto-calculate this in most cases. Provide it only if you want to override foundation's defaults.
            nodes.vswitches.bond_mode: :- bond_mode such as balance-tcp, active-backup, etc.
            nodes.vswitches.lacp: :- Status of LACP.
            nodes.vswitches.mtu: :- MTU of the vswitch. Applicable only for AHV.
            nodes.vswitches.name: :- Name of the vswitch.
            nodes.vswitches.other_config: :- Terraform blocks of Auxiliary lacp configurations. Applicable only for AHV.
            nodes.vswitches.uplinks: :- Terraform blocks of MAC Addresses of NICs in a team/bond.
            nos_package: ': - (Required) NOS package.'
            session_id: ': - session_id of the imaging session'
            skip_hypervisor: ': - If hypervisor installation should be skipped.'
            svm_rescue_args: ': - Arguments to be passed to svm_rescue for AOS installation. Ensure that the arguments provided are supported by the AOS version used for imaging.'
            tests: ': - Types of tests to be performed.'
            tests.run_ncc: ': - Whether NCC checks should run.'
            tests.run_syscheck: ': - Whether system checks should run.'
            ucsm_ip: ': - UCSM IP address.'
            ucsm_password: ': - UCSM password.'
            ucsm_user: ': - UCSM username.'
            unc_password: ': - UNC password.'
            unc_path: ': - UNC Path.'
            unc_username: ': - UNC username.'
            xen_config_type: ': - xen config types.'
            xs_master_ip: ': - xen server master IP address.'
            xs_master_label: ': - xen server master label.'
            xs_master_password: ': - xen server master password.'
            xs_master_username: ': - xen server master username.'
        importStatements: []
    nutanix_foundation_ipmi_config:
        subCategory: ""
        description: Configures IPMI IP address on BMC of nodes.
        name: nutanix_foundation_ipmi_config
        title: nutanix_foundation_ipmi_config
        examples:
            - name: impi-1
              manifest: |-
                {
                  "blocks": [
                    {
                      "block_id": "xyz",
                      "nodes": [
                        {
                          "ipmi_configure_now": true,
                          "ipmi_ip": "10.xx.xx.xx",
                          "ipmi_mac": "ff:ff:ff:ff:ff:ff"
                        },
                        {
                          "ipmi_configure_now": true,
                          "ipmi_ip": "10.xx.xx.xx",
                          "ipmi_mac": "ff:ff:ff:ff:ff:ff"
                        }
                      ]
                    }
                  ],
                  "ipmi_gateway": "10.xx.xx.xx",
                  "ipmi_netmask": "10.xx.xx.xx",
                  "ipmi_password": "XXXXX",
                  "ipmi_user": "username"
                }
        argumentDocs:
            Delete: ': - Delete will be a soft delete.'
            Update: ': - Resource will trigger new resource create call for any kind of update in resource block.'
            block_id: ': - (Optional) Block Id'
            blocks: ': - (Required) List of blocks.'
            ipmi_gateway: ': - (Required) IPMI gateway.'
            ipmi_netmask: ': - (Required) IPMI netmask.'
            ipmi_password: ': - (Required) IPMI password.'
            ipmi_user: ': - (Required) IPMI username.'
            nodes: ': - (Required) array of nodes for ipmi config.'
            nodes.ipmi_configure_now: ': - (Required) Whether IPMI should be configured. Should be kept true to configure'
            nodes.ipmi_configure_successful: ': - Whether IPMI was successfully configured.'
            nodes.ipmi_ip: ': - IPMI IP address.'
            nodes.ipmi_mac: ': - (Required) IPMI mac address.'
            nodes.ipmi_message: ': - IPMI configuration status message if any.'
        importStatements: []
    nutanix_image:
        subCategory: ""
        description: Provides a Nutanix Image resource to Create a Image.
        name: nutanix_image
        title: nutanix_image
        examples:
            - name: test
              manifest: |-
                {
                  "description": "Ubuntu",
                  "name": "Ubuntu",
                  "source_uri": "http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso"
                }
        argumentDocs:
            api_version: '- The version of the API.'
            architecture: ': - (Optional) The supported CPU architecture for a disk image.'
            availability_zone_reference: ': - (Optional) The reference to a availability_zone.'
            categories: ': - (Optional) Categories for the image.'
            checksum: ': - (Optional) Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.'
            creation_time: ': - UTC date and time in RFC-3339 format when image was created.'
            data_source_reference: '- (Optional)  Reference to a data source.'
            description: ': - (Optional) A description for image.'
            image_type: ': - (Optional) The type of image.'
            kind: ': - The kind name (Default value: project)(Required).'
            last_update_time: ': - UTC date and time in RFC-3339 format when image was last updated.'
            metadata: ': - The image kind metadata.'
            name: ': - (Required) The name for the image.'
            owner_reference: ': - (Optional) The reference to a user.'
            product_name: ': - (Optional) Name of the producer/distribution of the image. For example windows or red hat.'
            product_version: ': - (Optional) Version string for the disk image.'
            project_reference: ': - (Optional) The reference to a project.'
            retrieval_uri_list: ': - List of URIs where the raw image data can be accessed.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            size_bytes: ': - The size of the image in bytes.'
            source_path: ': - (Optional) A local path to upload an image.'
            source_uri: ': - (Optional) The source URI points at the location of the source image which is used to create/update image.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - The state of the image.'
            uuid: ': - image UUID.'
            version: ': - (Optional) The image version.'
        importStatements: []
    nutanix_karbon_cluster:
        subCategory: ""
        description: Provides a Nutanix Karbon Cluster resource to Create a k8s cluster.
        name: nutanix_karbon_cluster
        title: nutanix_karbon_cluster
        examples:
            - name: example_cluster
              manifest: |-
                {
                  "cni_config": [
                    {
                      "node_cidr_mask_size": 24,
                      "pod_ipv4_cidr": "172.20.0.0/16",
                      "service_ipv4_cidr": "172.19.0.0/16"
                    }
                  ],
                  "etcd_node_pool": [
                    {
                      "ahv_config": [
                        {
                          "network_uuid": "my_subnet_id",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid"
                        }
                      ],
                      "node_os_version": "ntnx-1.0",
                      "num_instances": 1
                    }
                  ],
                  "master_node_pool": [
                    {
                      "ahv_config": [
                        {
                          "network_uuid": "my_subnet_id",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid"
                        }
                      ],
                      "node_os_version": "ntnx-1.0",
                      "num_instances": 1
                    }
                  ],
                  "name": "example_cluster",
                  "storage_class_config": [
                    {
                      "reclaim_policy": "Delete",
                      "volumes_config": [
                        {
                          "file_system": "ext4",
                          "flash_mode": false,
                          "password": "my_pe_pw",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid",
                          "storage_container": "my_storage_container_name",
                          "username": "my_pe_username"
                        }
                      ]
                    }
                  ],
                  "version": "1.18.15-1",
                  "worker_node_pool": [
                    {
                      "ahv_config": [
                        {
                          "network_uuid": "my_subnet_id",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid"
                        }
                      ],
                      "node_os_version": "ntnx-1.0",
                      "num_instances": 1
                    }
                  ]
                }
            - name: example_cluster
              manifest: |-
                {
                  "cni_config": [
                    {
                      "node_cidr_mask_size": 24,
                      "pod_ipv4_cidr": "172.20.0.0/16",
                      "service_ipv4_cidr": "172.19.0.0/16"
                    }
                  ],
                  "etcd_node_pool": [
                    {
                      "ahv_config": [
                        {
                          "network_uuid": "my_subnet_id",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid"
                        }
                      ],
                      "node_os_version": "ntnx-1.0",
                      "num_instances": 1
                    }
                  ],
                  "master_node_pool": [
                    {
                      "ahv_config": [
                        {
                          "network_uuid": "my_subnet_id",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid"
                        }
                      ],
                      "node_os_version": "ntnx-1.0",
                      "num_instances": 1
                    }
                  ],
                  "name": "example_cluster",
                  "storage_class_config": [
                    {
                      "reclaim_policy": "Delete",
                      "volumes_config": [
                        {
                          "file_system": "ext4",
                          "flash_mode": false,
                          "password": "my_pe_pw",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid",
                          "storage_container": "my_storage_container_name",
                          "username": "my_pe_username"
                        }
                      ]
                    }
                  ],
                  "timeouts": [
                    {
                      "create": "1h",
                      "delete": "10m",
                      "update": "30m"
                    }
                  ],
                  "version": "1.18.15-1",
                  "worker_node_pool": [
                    {
                      "ahv_config": [
                        {
                          "network_uuid": "my_subnet_id",
                          "prism_element_cluster_uuid": "my_pe_cluster_uuid"
                        }
                      ],
                      "node_os_version": "ntnx-1.0",
                      "num_instances": 1
                    }
                  ]
                }
        argumentDocs:
            active_passive_config: ': - (Optional) The active passive mode uses the Virtual Router Redundancy Protocol (VRRP) protocol to provide high availability of the master. Note: Updates to this attribute forces new resource creation.'
            active_passive_config.#.external_ipv4_address: ': (Required) The VRRP IPV4 address to be used by the masters.'
            ahv_config: ': - (Optional) VM configuration in AHV. Note: Updates to this attribute forces new resource creation.'
            ahv_config.cpu: ': - (Required) The number of VCPUs allocated for each VM on the PE cluster.'
            ahv_config.disk_mib: ': - (Optional) Size of local storage for each VM on the PE cluster in MiB.'
            ahv_config.memory_mib: ': - (Optional) Memory allocated for each VM on the PE cluster in MiB.'
            ahv_config.network_uuid: ': - (Required) The UUID of the network for the VMs deployed with this resource configuration.'
            ahv_config.prism_element_cluster_uuid: ': - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.'
            calico_config: ': - (Optional) Configuration of the calico CNI provider.'
            calico_config.ip_pool_config: ': - (Optional) List of IP pools to be configured/managed by calico.'
            calico_config.ip_pool_config.cidr: ': - (Optional) IP range to use for this pool, it should fall within pod cidr.'
            cni_config: ': - (Required) K8s cluster networking configuration. The flannel or the calico configuration needs to be provided. Note: Updates to this attribute forces new resource creation.'
            etcd_node_pool: ': - (Required) Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.'
            external_lb_config: ': - (Optional) The external load balancer configuration in the case of a multi-master-external-load-balancer type master deployment. Note: Updates to this attribute forces new resource creation.'
            external_lb_config.#.external_ipv4_address: ': (Required) The external load balancer IPV4 address.'
            external_lb_config.#.master_nodes_config: ': (Required) The configuration of the master nodes.'
            external_lb_config.#.master_nodes_config.ipv4_address: ': (Required) The IPV4 address to assign to the master.'
            external_lb_config.#.master_nodes_config.node_pool_name: ': (Optional) The name of the node pool in which this master IPV4 address will be used.'
            flannel_config: ': - (Optional) Configuration of the flannel container network interface (CNI) provider.'
            master_node_pool: ': - (Required) Configuration of the master node pools.'
            name: ': - (Required) The name for the k8s cluster. Note: Updates to this attribute forces new resource creation.'
            node_cidr_mask_size: ': - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.'
            node_os_version: ': - (Required) The version of the node OS image. Note: Updates to this attribute forces new resource creation.'
            nodes: ': - List of the deployed nodes in the node pool.'
            nodes.hostname: ': - Hostname of the deployed node.'
            nodes.ipv4_address: ': - IP of the deployed node.'
            num_instances: ': - (Required) Number of nodes in the node pool. Note: Updates to etcd or master node pool forces new resource creation.'
            pod_ipv4_cidr: ': - (Optional) CIDR for pods in the cluster.'
            private_registry: ': - (Optional) Allows the Karbon cluster to pull images of a list of private registries.'
            private_registry.registry_name: ': - (Required) Name of the private registry to add to the Karbon cluster.'
            reclaim_policy: '- (Optional) Reclaim policy for persistent volumes provisioned using the specified storage class.'
            service_ipv4_cidr: ': - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.'
            single_master_config: ': - (Optional) Configuration of a single master node. Note: Updates to this attribute forces new resource creation.'
            storage_class_config: ': - (Required) Storage class configuration attribute for defining the persistent volume attributes. Note: Updates to this attribute forces new resource creation.'
            timeouts: ': timeouts can customize the default timeout on CRUD functions with default timeouts. Supports "h", "m" or "s" .'
            version: ': - (Required) K8s version of the cluster. Note: Updates to this attribute forces new resource creation.'
            volumes_config.#.file_system: '- (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.'
            volumes_config.#.flash_mode: '- (Optional) Pins the persistent volumes to the flash tier in case of a true value.'
            volumes_config.#.password: '- (Required) The password of the Prism Element user that the API calls use to provision volumes.'
            volumes_config.#.prism_element_cluster_uuid: '- (Required) The universally unique identifier (UUID) of the Prism Element cluster.'
            volumes_config.#.storage_container: '- (Required) Name of the storage container the storage container uses to provision volumes.'
            volumes_config.#.username: '- (Required) Username of the Prism Element user that the API calls use to provision volumes.'
            wait_timeout_minutes: ': - (Optional) Maximum wait time for the Karbon cluster to provision.'
        importStatements: []
    nutanix_karbon_private_registry:
        subCategory: ""
        description: Provides a Nutanix Karbon Registry resource to Create a private registry entry in Karbon.
        name: nutanix_karbon_private_registry
        title: nutanix_karbon_private_registry
        examples:
            - name: registry
              manifest: '{}'
        argumentDocs:
            cert: ': - (Optional) Certificate of the private registry in format of base64-encoded byte array. Note: Updates to this attribute forces new resource creation.'
            endpoint: ': - Endpoint of the private in format url:port.'
            name: ': - (Required) Name of the private registry configuration. Note: Updates to this attribute forces new resource creation.'
            password: ': - (Optional) Password for authentication to the private registry. Note: Updates to this attribute forces new resource creation.'
            port: ': - (Optional) Port of the private registry.'
            url: ': - (Optional) URL of the private registry. Note: Updates to this attribute forces new resource creation.'
            username: ': - (Optional) Username for authentication to the private registry. Note: Updates to this attribute forces new resource creation.'
        importStatements: []
    nutanix_karbon_worker_nodepool:
        subCategory: ""
        description: Provides a resource to add/remove worker nodepool in an existing Nutanix Kubernetes Engine (NKE).
        name: nutanix_karbon_worker_nodepool
        title: nutanix_karbon_worker_nodepool
        examples:
            - name: kworkerNp
              manifest: |-
                {
                  "ahv_config": [
                    {
                      "cpu": 4,
                      "disk_mib": 122880,
                      "memory_mib": 8192,
                      "network_uuid": "61213511-6383-4a38-9ac8-4a552c0e5865"
                    }
                  ],
                  "cluster_name": "karbon",
                  "name": "workerpool1",
                  "num_instances": 1
                }
            - name: kworkerNp
              manifest: |-
                {
                  "ahv_config": [
                    {
                      "cpu": 4,
                      "disk_mib": 122880,
                      "memory_mib": 8192,
                      "network_uuid": "61213511-6383-4a38-9ac8-4a552c0e5865"
                    }
                  ],
                  "cluster_name": "karbon",
                  "labels": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "name": "workerpool1",
                  "num_instances": 1
                }
        argumentDocs:
            ahv_config: ': (Optional)  VM configuration in AHV.'
            ahv_config.cpu: ': - (Required) The number of VCPUs allocated for each VM on the PE cluster.'
            ahv_config.disk_mib: ': - (Optional) Size of local storage for each VM on the PE cluster in MiB.'
            ahv_config.iscsi_network_uuid: ': (Optional) VM network UUID for isolating iscsi data traffic.'
            ahv_config.memory_mib: ': - (Optional) Memory allocated for each VM on the PE cluster in MiB.'
            ahv_config.network_uuid: ': - (Required) The UUID of the network for the VMs deployed with this resource configuration.'
            ahv_config.prism_element_cluster_uuid: ': - (Optional) The unique universal identifier (UUID) of the Prism Element'
            cluster_name: ': (Required) Kubernetes cluster name'
            labels: ': (Optional) labels of node'
            name: ': (Required) unique worker nodepool name'
            node_os_version: ': (Optional) The version of the node OS image'
            nodes: ': List of node details of pool.'
            nodes.hostname: ': hostname of node'
            nodes.ipv4_address: ': ipv4 address of node'
            num_instances: ': (Required) number of node instances'
        importStatements: []
    nutanix_ndb_authorize_dbserver:
        subCategory: ""
        description: This operation submits a request to authorize db server VMs for cloning of the database instance in Nutanix database service (NDB).
        name: nutanix_ndb_authorize_dbserver
        title: nutanix_ndb_authorize_dbserver
        examples:
            - name: name
              manifest: |-
                {
                  "dbservers_id": [
                    "{{ dbServer_IDs}}"
                  ],
                  "time_machine_name": "test-pg-inst"
                }
        argumentDocs:
            'dbservers_id ': ': (Required)'
            time_machine_id: ': (Optional)'
            time_machine_name: ': (Optional)'
        importStatements: []
    nutanix_ndb_clone:
        subCategory: ""
        description: This operation submits a request to perform clone of the database instance in Nutanix database service (NDB).
        name: nutanix_ndb_clone
        title: nutanix_ndb_clone
        examples:
            - name: name
              manifest: |-
                {
                  "compute_profile_id": "{{ compute_profile_id }}",
                  "create_dbserver": true,
                  "database_parameter_profile_id": "{{ databse_profile_id }}",
                  "name": "test-inst-tf-check",
                  "network_profile_id": "{{ network_profile_id }}",
                  "nodes": [
                    {
                      "compute_profile_id": "{{ compute_profile_id }}",
                      "network_profile_id": "{{ network_profile_id }}",
                      "nx_cluster_id": "{{ nx_Cluster_id }}",
                      "vm_name": "test_vm_clone"
                    }
                  ],
                  "nx_cluster_id": "{{ nx_Cluster_id }}",
                  "postgresql_info": [
                    {
                      "db_password": "pass",
                      "vm_name": "test_vm_clone"
                    }
                  ],
                  "ssh_public_key": "{{ sshkey }}",
                  "time_machine_name": "test-pg-inst",
                  "time_zone": "Asia/Calcutta",
                  "user_pitr_timestamp": "{{ point_in_time }}"
                }
        argumentDocs:
            actionarguments: ': (Optional) if any action arguments is required'
            actionarguments.name: ': - (Required) name of argument'
            actionarguments.value: ': - (Required) value for argument'
            clone: ': cloned or not'
            clustered: ': clone will be clustered or not'
            compute_profile_id: ': specify the compute profile id'
            create_dbserver: ': create new dbserver'
            database_cluster_type: ': database cluster type'
            database_name: ': database name'
            database_nodes: ': database nodes associated with database instance'
            database_parameter_profile_id: ': specify the database parameter profile id'
            date_created: ': date created for clone'
            date_modified: ': last modified date for clone'
            dbserver_cluster_id: ': dbserver cluster id'
            dbserver_id: ': Specify if you want to create a database server. This value can be set to true or false as required.'
            dbserver_logical_cluster: ': dbserver logical cluster'
            dbserver_logical_cluster_id: ': dbserver logical cluster id'
            delete: :- (Optional) Delete the database clone from the VM. Default value is true
            delete_logical_cluster: :- (Optional) Delete the logical cluster. Default is true
            delete_time_machine: :- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
            description: ': database instance description'
            forced: :- (Optional) Force delete of instance. Default is false
            info: ': info of clone'
            latest_snapshot: ': latest snapshot'
            lcm_config: ': LCM Config contains the expiry details and refresh details'
            linked_databases: ': linked databases within database instance'
            metric: ': Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.'
            name: ': database instance name'
            network_profile_id: ': specify the network profile id'
            node_count: ': Node count. Default is 1 for single instance'
            nodes: ': Nodes contain info about dbservers vm'
            nodes.compute_profile_id: ': specify compute profile id'
            nodes.dbserver_id: ': dberver id'
            nodes.network_profile_id: ': specify network profile id'
            nodes.new_db_server_time_zone: ': dbserver time zone'
            nodes.nx_cluster_id: ': cluster id'
            nodes.properties: ': properties of vm'
            nodes.vm_name: ': name for the database server VM.'
            nx_cluster_id: ': cluster id on where clone will be present'
            postgresql_info: ': postgresql info for the clone'
            postgresql_info.db_password: ':  password of the postgres superuser.'
            postgresql_info.dbserver_description: ': description for the dbserver.'
            postgresql_info.post_clone_cmd: ': OS command that you want to run after the instance is created.'
            postgresql_info.pre_clone_cmd: ':  OS command that you want to run before the instance is created.'
            postgresql_info.vm_name: ': name for the database server VM.'
            remove: :- (Optional) Unregister the database clone from NDB. Default value is false
            remove_logical_cluster: ': (Optional) remove logical cluster. Default value is false'
            snapshot_id: ': (Optional) snapshot id from where clone is created'
            soft_remove: :- (Optional) Soft remove. Default will be false
            ssh_public_key: ': ssh public key'
            status: ': status of clone'
            tags: ': allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.'
            time_machine_id: ': (Optional) time machine id'
            time_machine_name: ': (Optional) time machine name'
            time_zone: :(Optional) timezone
            type: ': type of clone'
            user_pitr_timestamp: :(Optional) point in time for clone to be created
            vm_password: ': vm password'
        importStatements: []
    nutanix_ndb_clone_refresh:
        subCategory: ""
        description: NDB allows you to create and refresh clones to a point in time either by using transactional logs or by using snapshots. This operation submits a request to perform refresh clone of the database in Nutanix database service (NDB).
        name: nutanix_ndb_clone_refresh
        title: nutanix_ndb_clone_refresh
        examples:
            - name: acctest-managed
              manifest: |-
                {
                  "clone_id": "{{ clone_id }}",
                  "snapshot_id": "{{ snapshot_id }}",
                  "timezone": "Asia/Calcutta"
                }
            - name: acctest-managed
              manifest: |-
                {
                  "clone_id": "{{ clone_id }}",
                  "timezone": "Asia/Calcutta",
                  "user_pitr_stamp": "{{ timestamp }}"
                }
        argumentDocs:
            clone_id: ': (Required) clone id'
            snapshot_id: ': (Optional) snapshot id where clone has to be refreshed'
            timezone: ': (Optional) timezone. Default is Asia/Calcutta.'
            user_pitr_stamp: ': (Optional) Point in time recovery where clone has to be refreshed'
        importStatements: []
    nutanix_ndb_clusters:
        subCategory: ""
        description: This operation submits a request to add a Nutanix cluster to Nutanix database service (NDB).
        name: nutanix_ndb_clusters
        title: nutanix_ndb_cluster
        examples:
            - name: clsname
              manifest: |-
                {
                  "agent_network_info": [
                    {
                      "dns": "{{ DNS servers available in the }}",
                      "ntp": "{{ NTP servers available }}"
                    }
                  ],
                  "cluster_ip": "{{ cluster_ip }}",
                  "description": "test description",
                  "name": "{{ test-cluster }}",
                  "networks_info": [
                    {
                      "access_type": [
                        "PRISM",
                        "DSIP",
                        "DBSERVER"
                      ],
                      "network_info": [
                        {
                          "gateway": "{{ gateway }}",
                          "static_ip": "{{ static_ip }}",
                          "subnet_mask": "{{ subnet_mask }}",
                          "vlan_name": "vlan_static"
                        }
                      ],
                      "type": "DHCP"
                    }
                  ],
                  "password": "{{ password of cluster }}",
                  "storage_container": "{{ storage_container }}",
                  "username": "{{ username of cluster }}"
                }
        argumentDocs:
            agent_network_info: ': (Required) agent network info to register cluster'
            agent_network_info.dns: ': string of DNS servers(comma separted).'
            agent_network_info.ntp: ': string of NTP servers(comma separted).'
            cloud_info: ': - cloud info'
            cloud_type: ': - cloud type'
            cluster_ip: ': (Required) Prism Element IP address'
            date_created: ': - creation date'
            date_modified: ': - date modified'
            description: ': (Optional) description of cluster'
            entity_counts: ': - no. of entities related'
            fqdns: ': - fqdn'
            healthy: ': - if healthy status'
            hypervisor_type: ': - hypervisor type'
            hypervisor_version: ': - hypervisor version'
            id: ': - id of cluster'
            ip_addresses: ': - IP address'
            management_server_info: ': - NA'
            name: ': (Required) name of the cluster to be registered'
            networks_info: ': (Required) network segmentation to segment the network traffic of the agent VM.'
            networks_info.access_type: |-
                : VLAN access types for which you want to configure network segmentation. Supports [PRISM, DSIP, DBSERVER ].
                Prism Element: Select this VLAN access type to configure a VLAN that the NDB agent VM can use to communicate with Prism.
                Prism iSCSI Data Service. Select this VLAN access type to configure a VLAN that the agent VM can use to make connection requests to the iSCSI data services IP.
                DBServer Access from NDB server. Select this VLAN access type to configure a VLAN that is used for communications between the NDB agent VM and the database server VM on the newly registered NDB server cluster.
            networks_info.network_info: ': network segmentation to segment the network traffic'
            networks_info.network_info.gateway: ': gateway of agent network'
            networks_info.network_info.static_ip: ': static ip of agent network'
            networks_info.network_info.subnet_mask: ': subnet mask of agent network'
            networks_info.network_info.vlan_name: ': vlan name'
            networks_info.type: ': type of vlan. Supported [DHCP, Static, IPAM]'
            nx_cluster_uuid: ': - nutanix cluster uuid'
            owner_id: ': - owner UUID'
            password: ': (Required) Prism Element password'
            properties: ': - list of properties'
            reference_count: ': - NA'
            resource_config: ': - resource related consumption info'
            status: ': - current status'
            storage_container: ': (Required) select a storage container which is used for performing database operations in the cluster'
            unique_name: ': - unique name of cluster'
            username: ': (Required) username of the Prism Element administrator'
            version: ': - version'
        importStatements: []
    nutanix_ndb_database:
        subCategory: ""
        description: 'This operation submits a request to create, update and delete database instance in Nutanix database service (NDB). Note: For 1.8.0 release, only postgress database type is qualified and officially supported.'
        name: nutanix_ndb_database
        title: nutanix_ndb_database
        examples:
            - name: dbp
              manifest: |-
                {
                  "computeprofileid": "{{ compute_profile_id }}",
                  "databasetype": "postgres_database",
                  "dbparameterprofileid": "{{ db_parameter_profile_id }}",
                  "description": "add description",
                  "name": "test-inst",
                  "networkprofileid": "{{ network_profile_id }}",
                  "nodes": [
                    {
                      "networkprofileid": "\u003cnetwork-profile-uuid\u003e",
                      "vmname": "test-era-vm1"
                    }
                  ],
                  "nxclusterid": "${local.clusters.EraCluster.id}",
                  "postgresql_info": [
                    {
                      "database_names": "testdb1",
                      "database_size": "{{ 200 }}",
                      "db_password": "password",
                      "listener_port": "{{ listner_port }}"
                    }
                  ],
                  "softwareprofileid": "{{ software_profile_id }}",
                  "softwareprofileversionid": "{{ software_profile_version_id }}",
                  "sshpublickey": "{{ ssh-public-key }}",
                  "timemachineinfo": [
                    {
                      "description": "description of time machine",
                      "name": "test-pg-inst",
                      "schedule": [
                        {
                          "continuousschedule": [
                            {
                              "enabled": true,
                              "logbackupinterval": 30,
                              "snapshotsperday": 1
                            }
                          ],
                          "monthlyschedule": [
                            {
                              "dayofmonth": "27",
                              "enabled": true
                            }
                          ],
                          "quartelyschedule": [
                            {
                              "dayofmonth": 27,
                              "enabled": true,
                              "startmonth": "JANUARY"
                            }
                          ],
                          "snapshottimeofday": [
                            {
                              "hours": 16,
                              "minutes": 0,
                              "seconds": 0
                            }
                          ],
                          "weeklyschedule": [
                            {
                              "dayofweek": "WEDNESDAY",
                              "enabled": true
                            }
                          ],
                          "yearlyschedule": [
                            {
                              "dayofmonth": 31,
                              "enabled": false,
                              "month": "DECEMBER"
                            }
                          ]
                        }
                      ],
                      "slaid": "{{ sla_id }}"
                    }
                  ]
                }
              references:
                nxclusterid: local.clusters.EraCluster.id
            - name: dbp
              manifest: |-
                {
                  "autotunestagingdrive": true,
                  "clustered": true,
                  "computeprofileid": "{{ compute_profile_id }}",
                  "createdbserver": true,
                  "databasetype": "postgres_database",
                  "dbparameterprofileid": "{{ db_parameter_profile_id }}",
                  "description": "adding description",
                  "name": "test-pg-inst-HA-tf",
                  "networkprofileid": "{{ network_profile_id }}",
                  "nodecount": 4,
                  "nodes": [
                    {
                      "nx_cluster_id": "{{ nx_cluster_id }}",
                      "properties": [
                        {
                          "name": "node_type",
                          "value": "haproxy"
                        }
                      ],
                      "vmname": "{{ vm name }}"
                    },
                    {
                      "computeprofileid": "{{ compute_profile_id }}",
                      "networkprofileid": "{{ network_profile_id }}",
                      "nx_cluster_id": "{{ nx_cluster_id }}",
                      "properties": [
                        {
                          "name": "role",
                          "value": "Primary"
                        },
                        {
                          "name": "failover_mode",
                          "value": "Automatic"
                        },
                        {
                          "name": "node_type",
                          "value": "database"
                        }
                      ],
                      "vmname": "{{ name of vm }}"
                    },
                    {
                      "computeprofileid": "{{ compute_profile_id }}",
                      "networkprofileid": "{{ network_profile_id }}",
                      "nx_cluster_id": "{{ nx_cluster_id }}",
                      "properties": [
                        {
                          "name": "role",
                          "value": "Secondary"
                        },
                        {
                          "name": "failover_mode",
                          "value": "Automatic"
                        },
                        {
                          "name": "node_type",
                          "value": "database"
                        }
                      ],
                      "vmname": "{{ name of vm }}"
                    },
                    {
                      "computeprofileid": "{{ compute_profile_id }}",
                      "networkprofileid": "{{ network_profile_id }}",
                      "nx_cluster_id": "{{ nx_cluster_id }}",
                      "properties": [
                        {
                          "name": "role",
                          "value": "Secondary"
                        },
                        {
                          "name": "failover_mode",
                          "value": "Automatic"
                        },
                        {
                          "name": "node_type",
                          "value": "database"
                        }
                      ],
                      "vmname": "{{ name of vm }}"
                    }
                  ],
                  "nxclusterid": "1c42ca25-32f4-42d9-a2bd-6a21f925b725",
                  "postgresql_info": [
                    {
                      "database_names": "testdb1",
                      "database_size": "200",
                      "db_password": "{{ database password}}",
                      "ha_instance": [
                        {
                          "cluster_name": "{{ cluster_name }}",
                          "patroni_cluster_name": " {{ patroni_cluster_name }}",
                          "proxy_read_port": "5001",
                          "proxy_write_port": "5000"
                        }
                      ],
                      "listener_port": "5432"
                    }
                  ],
                  "softwareprofileid": "{{ software_profile_id }}",
                  "softwareprofileversionid": "{{ software_profile_version_id }}",
                  "sshpublickey": "{{ ssh_public_key }}",
                  "timemachineinfo": [
                    {
                      "description": "",
                      "name": "test-pg-inst-HA",
                      "schedule": [
                        {
                          "continuousschedule": [
                            {
                              "enabled": true,
                              "logbackupinterval": 30,
                              "snapshotsperday": 1
                            }
                          ],
                          "monthlyschedule": [
                            {
                              "dayofmonth": "27",
                              "enabled": true
                            }
                          ],
                          "quartelyschedule": [
                            {
                              "dayofmonth": 27,
                              "enabled": true,
                              "startmonth": "JANUARY"
                            }
                          ],
                          "snapshottimeofday": [
                            {
                              "hours": 16,
                              "minutes": 0,
                              "seconds": 0
                            }
                          ],
                          "weeklyschedule": [
                            {
                              "dayofweek": "WEDNESDAY",
                              "enabled": true
                            }
                          ],
                          "yearlyschedule": [
                            {
                              "dayofmonth": 31,
                              "enabled": false,
                              "month": "DECEMBER"
                            }
                          ]
                        }
                      ],
                      "sla_details": [
                        {
                          "primary_sla": [
                            {
                              "nx_cluster_ids": [
                                "{{ nx_cluster_id}}"
                              ],
                              "sla_id": "{{ required SLA}}0"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "vm_password": "{{ vm_password}}"
                }
            - name: dbp
              manifest: |-
                {
                  "actionarguments": [
                    {
                      "name": "host_ip",
                      "value": "{{ hostIP }}"
                    }
                  ],
                  "createdbserver": false,
                  "databasetype": "postgres_database",
                  "dbparameterprofileid": "{{ db_parameter_profile_id }}",
                  "dbserverId": "{{ dbserver_id }}",
                  "description": "add description",
                  "name": "test-inst",
                  "nodes": [
                    {
                      "dbserverid": "{{ dbserver_id }}"
                    }
                  ],
                  "postgresql_info": [
                    {
                      "database_names": "testdb1",
                      "database_size": "{{ 200 }}",
                      "db_password": "password",
                      "listener_port": "{{ listner_port }}"
                    }
                  ],
                  "timemachineinfo": [
                    {
                      "description": "description of time machine",
                      "name": "test-pg-inst",
                      "schedule": [
                        {
                          "continuousschedule": [
                            {
                              "enabled": true,
                              "logbackupinterval": 30,
                              "snapshotsperday": 1
                            }
                          ],
                          "monthlyschedule": [
                            {
                              "dayofmonth": "27",
                              "enabled": true
                            }
                          ],
                          "quartelyschedule": [
                            {
                              "dayofmonth": 27,
                              "enabled": true,
                              "startmonth": "JANUARY"
                            }
                          ],
                          "snapshottimeofday": [
                            {
                              "hours": 16,
                              "minutes": 0,
                              "seconds": 0
                            }
                          ],
                          "weeklyschedule": [
                            {
                              "dayofweek": "WEDNESDAY",
                              "enabled": true
                            }
                          ],
                          "yearlyschedule": [
                            {
                              "dayofmonth": 31,
                              "enabled": false,
                              "month": "DECEMBER"
                            }
                          ]
                        }
                      ],
                      "slaid": "{{ sla_id }}"
                    }
                  ]
                }
        argumentDocs:
            Update: ': - Currently only update of instance''s name and description is supported using this resource'
            actionarguments: ': - (Optional) action arguments for database. For postgress, you can use postgresql_info'
            actionarguments.name: ': - (Required) name of argument'
            actionarguments.value: ': - (Required) value for argument'
            autotunestagingdrive: ': - (Optional) Enable auto tuning of staging drive. Default: true'
            clustered: ': - (Optional) If clustered database. Default: false'
            computeprofileid: ': - (Optional) ID of compute profile'
            createdbserver: ': - (Optional) Set this to create new DB server VM. Default: true'
            databasetype: ': - (Required) Type of database. Valid values: postgres_database'
            dbparameterprofileid: ': - (Optional) DB parameters profile ID'
            dbserverid: ': - (Optional) DB server VM ID for creating instance on registered DB server VM'
            delete: :- (Optional) Delete the database from the VM. Default value is true
            delete_logical_cluster: :- (Optional) Delete the logical cluster. Default is true
            delete_time_machine: :- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
            description: ': - (Optional) The description'
            forced: :- (Optional) Force delete of instance. Default is false
            name: ': - (Required) Name of the instance.'
            networkprofileid: ': - (Optional) ID of network profile'
            newdbservertimezone: ': - (Optional) Timezone of new DB server VM'
            nodecount: ': - (Optional) No. of nodes/db server vms. Default: 1'
            nodes: ': - (Optional) nodes info'
            nodes.computeprofileid: :- (Optional) compute profile id
            nodes.dbserverid: ': - (Optional) Database server ID required for existing VM'
            nodes.ip_infos: :- (Optional) IP infos for custom network profile.
            nodes.networkprofileid: ': - (Required) network profile ID'
            nodes.nx_cluster_id: :- (Optional) cluster id.
            nodes.properties: ': - (Optional) list of additional properties'
            nodes.vmname: ': - (Required) name of vm'
            nxclusterid: ': - (Optional) Cluster ID for DB server VM'
            postgresql_info: ': - (Optional) action arguments for postgress type database.'
            postgresql_info.allocate_pg_hugepage: ': - (Optional) allocate huge page. Default: false'
            postgresql_info.auth_method: ': - (Optional) auth methods. Default: md5'
            postgresql_info.auto_tune_staging_drive: ': - (Optional) enable auto tuning of staging drive. Default: false'
            postgresql_info.cluster_database: ': - (Optional) if clustered database. Default: false'
            postgresql_info.database_names: ': - (Required) name of initial database to be created'
            postgresql_info.database_size: ': - (Required) initial database size'
            postgresql_info.db_password: ': - (Required) database instance password'
            postgresql_info.ha_instance: :- (Optional) High Availability instance
            postgresql_info.ha_instance.archive_wal_expire_days: :- (Optional) archive wal expire days. Default is set to -1
            postgresql_info.ha_instance.backup_policy: :- (Optional) backup policy for instance. Default is "primary_only"
            postgresql_info.ha_instance.cluster_name: :- (Required) cluster name
            postgresql_info.ha_instance.deploy_haproxy: :- (Optional) HA proxy node. Default is set to false
            postgresql_info.ha_instance.enable_peer_auth: :- (Optional) enable peer auth . Default is set to false.
            postgresql_info.ha_instance.enable_synchronous_mode: :- (Optional) enable synchronous mode. Default is set to true
            postgresql_info.ha_instance.failover_mode: :- (Optional) failover mode of nodes.
            postgresql_info.ha_instance.node_type: :- (Optional) node type of instance. Default is set to database
            postgresql_info.ha_instance.patroni_cluster_name: :- (Required) patroni cluster name
            postgresql_info.ha_instance.provision_virtual_ip: :- (Optional) provisional virtual ip. Default is set to true
            postgresql_info.ha_instance.proxy_read_port: :-  (Required) proxy read port
            postgresql_info.ha_instance.proxy_write_port: :- (Required) proxy write port
            postgresql_info.listener_port: ': - (Required) listener port for database instance'
            postgresql_info.post_create_script: ': - (Optional) post instance create script'
            postgresql_info.pre_create_script: ': - (Optional) pre instance create script'
            remove: :- (Optional) Unregister the database from NDB. Default value is true
            soft_remove: :- (Optional) Soft remove. Default will be false
            softwareprofileid: ': - (Optional) ID of software profile'
            softwareprofileversionid: ': - (Optional) ID of version in software profile'
            sshpublickey: ': - (Optional) public key for ssh access to DB server VM'
            timemachineinfo: ': - (Optional) time machine config'
            timemachineinfo.autotunelogdrive: ': - (Optional) enable auto tune log drive. Default: true'
            timemachineinfo.description: ': - (Optional) description of time machine'
            timemachineinfo.name: ': - (Required) name of time machine'
            timemachineinfo.schedule: ': - (Optional) schedule for snapshots'
            timemachineinfo.schedule.continuousschedule: ': - (Optional) snapshot freq and log config'
            timemachineinfo.schedule.continuousschedule.enabled: ': - (Required) to enable'
            timemachineinfo.schedule.continuousschedule.logbackupinterval: ': - (Required) log catchup interval for database'
            timemachineinfo.schedule.continuousschedule.snapshotsperday: ': - (Required) num of snapshots per day'
            timemachineinfo.schedule.monthlyschedule: ': - (Optional) monthly snapshot config'
            timemachineinfo.schedule.monthlyschedule.dayofmonth: ': - (Required) day of month to take snapshot'
            timemachineinfo.schedule.monthlyschedule.enabled: ': - (Required) to enable'
            timemachineinfo.schedule.quartelyschedule: ': - (Optional) quaterly snapshot config'
            timemachineinfo.schedule.quartelyschedule.dayofmonth: ': - (Required) month''s day for snapshot'
            timemachineinfo.schedule.quartelyschedule.enabled: ': - (Required) to enable'
            timemachineinfo.schedule.quartelyschedule.startmonth: ': - (Required) quarter start month'
            timemachineinfo.schedule.snapshottimeofday: ': - (Optional) daily snapshot config'
            timemachineinfo.schedule.snapshottimeofday.hours: ': - (Required) hours'
            timemachineinfo.schedule.snapshottimeofday.minutes: ': - (Required) minutes'
            timemachineinfo.schedule.snapshottimeofday.seconds: ': - (Required) seconds'
            timemachineinfo.schedule.weeklyschedule: ': - (Optional) weekly snapshot config'
            timemachineinfo.schedule.weeklyschedule.dayofweek: ': - (Required) day of week to take snaphsot. Eg. "WEDNESDAY"'
            timemachineinfo.schedule.weeklyschedule.enabled: ': - (Required) to enable'
            timemachineinfo.schedule.yearlyschedule: ': - (Optional) yearly snapshot config'
            timemachineinfo.schedule.yearlyschedule.dayofmonth: ': - (Required) day of month to take snapshot'
            timemachineinfo.schedule.yearlyschedule.enabled: ': - (Required) to enable'
            timemachineinfo.schedule.yearlyschedule.month: ': - (Required) month for snapshot'
            timemachineinfo.sla_details: :-  (optional) SLA details for HA instance
            timemachineinfo.sla_details.primary_sla: :- (Required) primary sla details
            timemachineinfo.sla_details.primary_sla.nx_cluster_ids: '-: (Optioanl) cluster ids'
            timemachineinfo.sla_details.primary_sla.sla_id: :- (Required) sla id
            timemachineinfo.slaid: ': - (Optional) SLA ID for single instance'
            timemachineinfo.tags: ': - (Optional) tags'
            vm_password: ': - (Optional) password for DB server VM and era drive user'
        importStatements: []
    nutanix_ndb_database_restore:
        subCategory: ""
        description: Restoring allows you to restore a source instance registered with NDB to a snapshot or point in time supported by the source instance time machine. You can restore an instance by using a snapshot ID, the point-in-time recovery (PITR) timestamp, or the latest snapshot. This operation submits a request to restore the database instance in Nutanix database service (NDB).
        name: nutanix_ndb_database_restore
        title: nutanix_ndb_database_restore
        examples:
            - name: name
              manifest: |-
                {
                  "database_id": "{{ database_id }}",
                  "time_zone_pitr": "Asia/Calcutta",
                  "user_pitr_timestamp": "2022-12-28 00:54:30"
                }
            - name: name
              manifest: |-
                {
                  "database_id": "{{ database_id }}",
                  "snapshot_id": "{{ snapshot id }}"
                }
        argumentDocs:
            clone: ': whether instance is cloned or not'
            database_cluster_type: ': database cluster type'
            database_id: ': (Required) database id'
            database_name: ': name of database'
            database_nodes: ': database nodes associated with database instance'
            databasetype: ': type of database'
            date_created: ': date created for db instance'
            date_modified: ': date modified for instance'
            dbserver_logical_cluster: ': dbserver logical cluster'
            dbserver_logical_cluster_id: ': dbserver logical cluster id'
            description: ': description of database instance'
            info: ': info of instance'
            latest_snapshot: ': (Optional) latest snapshot id'
            lcm_config: ': LCM config of instance'
            linked_databases: ': linked databases within database instance'
            metric: ': Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.'
            name: ': Name of database instance'
            parent_database_id: ': parent database id'
            properties: ': properties of database created'
            restore_version: ': (Optional) helps to restore the database with same config.'
            snapshot_id: ': (Optional) snapshot id from you want to use for restoring the instance'
            status: ': status of instance'
            tags: ': allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.'
            time_machine: ': Time Machine details of instance'
            time_machine_id: ': time machine id of instance'
            time_zone: ': timezone on which instance is created xw'
            time_zone_pitr: ': (Optional) timezone . Should be used with  user_pitr_timestamp'
            type: ': type of database'
            user_pitr_timestamp: ': (Optional) the time to which you want to restore your instance.'
        importStatements: []
    nutanix_ndb_database_scale:
        subCategory: ""
        description: Scaling the database extends the storage size proportionally across the attached virtual disks or volume groups. Scaling is supported for both single and HA instances. This operation submits a request to scale out the database instance in Nutanix database service (NDB).
        name: nutanix_ndb_database_scale
        title: nutanix_ndb_database_scale
        examples:
            - name: scale
              manifest: |-
                {
                  "application_type": "{{ Application Type }}",
                  "data_storage_size": 1,
                  "database_uuid": "{{ database_id }}"
                }
        argumentDocs:
            application_type: ': (Required) type of instance. eg: postgres_database'
            clone: ': whether instance is cloned or not'
            data_storage_size: ': (Required) data area (in GiB) to be added to the existing database.'
            database_cluster_type: ': database cluster type'
            database_name: ': name of database'
            database_nodes: ': database nodes associated with database instance'
            database_uuid: ': (Required) Database id'
            databasetype: ': type of database'
            date_created: ': date created for db instance'
            date_modified: ': date modified for instance'
            dbserver_logical_cluster: ': dbserver logical cluster'
            dbserver_logical_cluster_id: ': dbserver logical cluster id'
            description: ': description of database instance'
            info: ': info of instance'
            lcm_config: ': LCM config of instance'
            linked_databases: ': linked databases within database instance'
            metric: ': Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.'
            name: ': Name of database instance'
            parent_database_id: ': parent database id'
            post_script_cmd: ': (Optional) post script command'
            pre_script_cmd: ': (Optional) pre script command'
            properties: ': properties of database created'
            scale_count: ': (Optional) scale count helps to scale the same instance with same config'
            status: ': status of instance'
            tags: ': allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags.'
            time_machine: ': Time Machine details of instance'
            time_machine_id: ': time machine id of instance'
            time_zone: ': timezone on which instance is created xw'
            type: ': type of database'
        importStatements: []
    nutanix_ndb_database_snapshot:
        subCategory: ""
        description: NDB time machine allows you to capture and replicate snapshots of the source database across multiple clusters (as defined in the DAM policy) at the time and frequency specified in the schedule. This operation submits a request to perform snapshot of the database instance in Nutanix database service (NDB).
        name: nutanix_ndb_database_snapshot
        title: nutanix_ndb_database_snapshot
        examples:
            - name: name
              manifest: |-
                {
                  "name": "test-snap",
                  "remove_schedule_in_days": 1,
                  "time_machine_id": "{{ tms_ID }}"
                }
            - name: name
              manifest: |-
                {
                  "name": "test-snap",
                  "remove_schedule_in_days": 1,
                  "time_machine_name": "{{ tms_name }}"
                }
        argumentDocs:
            app_info_version: ': App info version'
            applicable_types: ': Applicable types'
            database_node_id: ': database node id'
            database_snapshot: ': database snapshot'
            date_created: ': created date'
            date_modified: ': modified date'
            dbserver_id: ': dbserver id'
            dbserver_ip: :dbserver ip
            dbserver_name: ': dbserver name'
            dbserver_storage_metadata_version: ': dbserver storage metadata version'
            description: ': description of snapshot'
            expiry_date_timezone: ': (Optional) Default is set to Asia/Calcutta'
            from_timestamp: ': from timestamp'
            id: ': name of snapshot'
            lcm_config: ': LCM config'
            name: ': (Optional) Snapshot name. Default value is era_manual_snapshot.'
            nx_cluster_id: ': nx cluster id'
            parent_snapshot: ': parent snapshot'
            parent_snapshot_id: ': parent snapshot id'
            processed: ': processed'
            properties: ': properties'
            protection_domain_id: ': protection domain'
            remove_schedule_in_days: ': (Optional) Removal schedule after which the snapshot should be removed.'
            replicate_to_clusters: ': (Optional) snapshots to be replicated to clusters.'
            replicated_snapshots: ': replicated snapshots'
            santised_from_snapshot_id: ': sanitized  snapshot id'
            santised_snapshots: :santised snapshots
            snapshot_family: ': snapshot family'
            snapshot_size: ': snapshot size'
            snapshot_timestamp: ': snapshot timeStamp'
            snapshot_timestamp_date: ': snapshot timestamp date'
            snapshot_uuid: ': snapshot uuid'
            software_database_snapshot: ': software database snapshot'
            software_snapshot: ': software snapshot'
            software_snapshot_id: ': software snapshot id'
            status: ': status'
            tags: ': tags'
            time_machine_id: ': (Optional) Time Machine Id'
            time_machine_name: :(Optional) Time Machine Name
            timezone: ': timezone'
            to_timestamp: ': to timestamp'
            type: ': type'
        importStatements: []
    nutanix_ndb_dbserver_vm:
        subCategory: ""
        description: 'This operation submits a request to create, update and delete database server VMs in Nutanix database service (NDB). Note: For 1.8.0 release, only postgress database type is qualified and officially supported.'
        name: nutanix_ndb_dbserver_vm
        title: nutanix_ndb_dbserver_vm
        examples:
            - name: acctest-managed
              manifest: |-
                {
                  "compute_profile_id": {},
                  "database_type": "postgres_database",
                  "description": "{{ description }}",
                  "network_profile_id": {},
                  "nx_cluster_id": {},
                  "postgres_database": [
                    {
                      "client_public_key": "{{ public_key }}",
                      "vm_name": "test-vm"
                    }
                  ],
                  "software_profile_id": {},
                  "software_profile_version_id": {},
                  "vm_password": "{{ vm_password }}"
                }
            - name: acctest-managed
              manifest: |-
                {
                  "compute_profile_id": {},
                  "database_type": "postgres_database",
                  "description": "{{ description }}",
                  "network_profile_id": {},
                  "nx_cluster_id": {},
                  "postgres_database": [
                    {
                      "client_public_key": "{{ public_key }}",
                      "vm_name": "test-vm"
                    }
                  ],
                  "time_machine_id": {},
                  "vm_password": "{{ vm_password }}"
                }
        argumentDocs:
            client_id: ':  client id'
            compute_profile_id: ': (Optional) Compute profile id.'
            database_type: ': (Required) database type. Valid values: postgres_database'
            dbserver_cluster_id: ': dbserver cluster id.'
            delete: :- (Optional) Delete the VM and associated storage. Default value is true
            delete_vgs: :- (Optional) Delete volume grous. Default value is true
            delete_vm_snapshots: :- (Optional) Delete the vm snapshots. Default is true
            description: ': (Optional) Type a description for the database server VM.'
            era_drive_id: ': era drive id'
            era_version: ': era version'
            ip_addresses: ': IP addresses of the dbserver vm'
            mac_addresses: ': Mac addresses of dbserver vm'
            maintenance_tasks: ': (Optional) maintenance window configured to enable automated patching.'
            maintenance_tasks.maintenance_window_id: ': Associate an existing maintenance window id. NDB starts OS patching or database patching as per the schedule defined in the maintenance window.'
            maintenance_tasks.tasks: ': Tasks for the maintenance.'
            maintenance_tasks.tasks.post_command: :add post (operating system and database patching) commands.
            maintenance_tasks.tasks.pre_command: ': add pre (operating system and database patching) commands.'
            maintenance_tasks.tasks.task_type: ': use this option if you want NDB to perform database patching or OS patching automatically. Supports [ OS_PATCHING, DB_PATCHING ].'
            name: ': name of the dbserver vm'
            network_profile_id: ': (Optioanl) Network profile id.'
            postgres_database: ': (Optional) Postgres database server vm'
            postgres_database.client_public_key: ': (Required) use SSH public keys to access the database server VM.'
            postgres_database.vm_name: ': (Required) name for the database server VM.'
            properties: ': Properties of dbserver vm'
            remove: :- (Optional) Unregister the database from NDB. Default value is false
            snapshot_id: ': (Optional) Snapshot id. If not given, it will use latest snapshot to provision db server vm.'
            soft_remove: :- (Optional) Soft remove. Default will be false
            software_profile_id: ': (Optional) software profile id you want to provision a database server VM from an existing software profile.Required with software_profile_version_id. Conflicts with time_machine_id .'
            software_profile_version_id: ': (Optional) SOftware Profile Version Id.'
            status: ': Status of Dbserver . Active or not.'
            time_machine_id: ': (Optional) Time Machine id you want to provision a database server VM by using the database and operating system software stored in a time machine. Conflicts with software_profile_id.'
            type: ': Type of entity. i.e. Dbserver'
            vm_cluster_name: ': cluster name for dbserver vm'
            vm_cluster_uuid: ': clusetr uuid for dbserver vm'
            vm_password: ': (Optional) password of the NDB drive user account.'
            vm_timezone: ':  timezone of dbserver vm'
        importStatements: []
    nutanix_ndb_log_catchups:
        subCategory: ""
        description: A log catch-up operation copies transaction logs from the source database based on a specified schedule. The schedule can be provided during database registration or provisioning or can be modified later. This operation submits a request to perform log catchups of the database instance in Nutanix database service (NDB).
        name: nutanix_ndb_log_catchups
        title: nutanix_ndb_log_catchups
        examples:
            - name: name
              manifest: |-
                {
                  "time_machine_id": "{{ timeMachineID }}"
                }
            - name: name
              manifest: |-
                {
                  "database_id": "{{ DatabaseID }}"
                }
        argumentDocs:
            database_id: ': (Optional)'
            for_restore: ': (Optional) Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.'
            log_catchup_version: ': (Optional) it helps to perform same operation with same config.'
            time_machine_id: ': (Optional) Time machine id of'
        importStatements: []
    nutanix_ndb_maintenance_task:
        subCategory: ""
        description: This operation submits a request to create, update and delete maintenance task association with database servers vms in Nutanix database service (NDB).
        name: nutanix_ndb_maintenance_task
        title: nutanix_ndb_maintenance_task
        examples:
            - name: name
              manifest: |-
                {
                  "dbserver_id": [
                    "{{ dbserver_vm_id }}"
                  ],
                  "maintenance_window_id": "{{ maintenance_window_id }}",
                  "tasks": [
                    {
                      "task_type": "OS_PATCHING"
                    }
                  ]
                }
            - name: name
              manifest: |-
                {
                  "dbserver_id": [
                    "{{ dbserver_vm_id }}"
                  ],
                  "maintenance_window_id": "{{ maintenance_window_id }}",
                  "tasks": [
                    {
                      "task_type": "DB_PATCHING"
                    }
                  ]
                }
            - name: name
              manifest: |-
                {
                  "dbserver_id": [
                    "{{ dbserver_vm_id }}"
                  ],
                  "maintenance_window_id": "{{ maintenance_window_id }}",
                  "tasks": [
                    {
                      "post_command": "{{ post_command for db patching }}",
                      "pre_command": "{{ pre_command for db patching }}",
                      "task_type": "DB_PATCHING"
                    },
                    {
                      "post_command": "{{ post_command for os patching }}",
                      "pre_command": "{{ pre_command for os patching}}",
                      "task_type": "OS_PATCHING"
                    }
                  ]
                }
        argumentDocs:
            dbserver_cluster: ': (Optional) dbserver cluster ids. Conflicts with "dbserver_id"'
            dbserver_id: ': (Optional) dbserver vm id. Conflicts with "dbserver_cluster"'
            entity_task_association: ': Entity Task Association  List.'
            entity_task_association.access_level: ': access level of tasks'
            entity_task_association.date_created: ': created date of task'
            entity_task_association.date_modified: ': modified date of task'
            entity_task_association.description: ': description of maintenance window'
            entity_task_association.entity_id: ': entity id'
            entity_task_association.entity_type: ': type of the entity. i.e. DBSERVER'
            entity_task_association.id: ': id of maintenance window'
            entity_task_association.maintenance_window_id: ': maintenance window id'
            entity_task_association.maintenance_window_owner_id: ': maintenance window owner id'
            entity_task_association.name: ': name of of maintenance window'
            entity_task_association.owner_id: ': owner id of task'
            entity_task_association.payload: ': list of pre post commands of OS or DB task'
            entity_task_association.payload.pre_post_command: ': Pre Post command of Task'
            entity_task_association.payload.pre_post_command.post_command: ': post command of task'
            entity_task_association.payload.pre_post_command.pre_command: ': pre command of task'
            entity_task_association.properties: ': properties of task'
            entity_task_association.status: ': status of task'
            entity_task_association.tags: ': tags of task'
            entity_task_association.task_type: ': type of the task. OS or DB'
            maintenance_window_id: ': (Required) maintenance window id which has to be associated'
            tasks: ': (Optional) task input for Operating System Patching or Database Patching or both'
            tasks.post_command: ': (Optional) command that you want to run after patching the OS/DB'
            tasks.pre_command: ': (Optional) command that you want to run before patching the OS/DB'
            tasks.task_type: ': (Required) type of task. Supports [ "OS_PATCHING", "DB_PATCHING" ]'
        importStatements: []
    nutanix_ndb_maintenance_window:
        subCategory: ""
        description: A maintenance window allows you to set a schedule that is used to automate repeated maintenance tasks such as OS patching and database patching. NDB allows you to create a maintenance window and then associate the maintenance window with a list of database server VMs or an instance. This operation submits a request to create, update and delete maintenance window in Nutanix database service (NDB).
        name: nutanix_ndb_maintenance_window
        title: nutanix_ndb_maintenance_window
        examples:
            - name: acctest-managed
              manifest: |-
                {
                  "day_of_week": "TUESDAY",
                  "description": "desc",
                  "duration": 3,
                  "name": "test-maintenance",
                  "recurrence": "WEEKLY",
                  "start_time": "17:04:47"
                }
            - name: acctest-managed
              manifest: |-
                {
                  "day_of_week": "TUESDAY",
                  "description": "description",
                  "duration": 2,
                  "name": "test-maintenance",
                  "recurrence": "MONTHLY",
                  "start_time": "17:04:47",
                  "week_of_month": 4
                }
        argumentDocs:
            access_level: ': access level'
            date_created: ': created date of maintenance window'
            date_modified: ': modified date of maintenance window'
            day_of_week: ': (Optional) Day of the week to trigger maintenance window. Supports [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]'
            description: ': (Optional) Description for maintenance window'
            duration: ': (Optional) duration in hours. Default is 2'
            entity_task_assoc: ': entity task association for maintenance window'
            name: ': (Required) Name for the maintenance window.'
            next_run_time: ': next run time for maintenance window to trigger'
            owner_id: ': owner id of maintenance window'
            properties: ': properties of maintenance window'
            recurrence: ': (Required) Supported values [ MONTHLY, WEEKLY ]'
            schedule: ': schedule of maintenance window'
            start_time: ': (Required) start time for maintenance window to trigger'
            status: ': status of maintennace window'
            tags: ': tags of maintenance window'
            timezone: ': timezone . Default is Asia/Calcutta .'
            week_of_month: ': (Optional) week of the month. Supports [1, 2, 3, 4] .'
        importStatements: []
    nutanix_ndb_network:
        subCategory: ""
        description: This operation submits a request to create, update and delete networks in Nutanix database service (NDB).
        name: nutanix_ndb_network
        title: nutanix_ndb_network
        examples:
            - name: name
              manifest: |-
                {
                  "cluster_id": "{{ cluster_id }}",
                  "gateway": "{{ gatway for the vlan }}",
                  "ip_pools": [
                    {
                      "end_ip": "{{ ending address range }}",
                      "start_ip": "{{ starting address range}}"
                    }
                  ],
                  "name": "test-sub",
                  "primary_dns": " {{ primary dns for the vlan }}",
                  "secondary_dns": "{{secondary dns for the vlan }}",
                  "subnet_mask": "{{ subnet mask for the vlan}}",
                  "type": "Static"
                }
            - name: name
              manifest: |-
                {
                  "cluster_id": "{{ cluster_id }}",
                  "dns_domain": {},
                  "gateway": "{{ gatway for the vlan }}",
                  "ip_pools": [
                    {
                      "end_ip": "{{ ending address range }}",
                      "start_ip": "{{ starting address range}}"
                    }
                  ],
                  "name": "test-sub",
                  "primary_dns": " {{ primary dns for the vlan }}",
                  "secondary_dns": "{{secondary dns for the vlan }}",
                  "subnet_mask": "{{ subnet mask for the vlan}}",
                  "type": "Static"
                }
        argumentDocs:
            cluster_id: ': (Required) Select the Nutanix cluster on which you want to add the VLAN.'
            dns_domain: ': (Optional) dns domain for vlan. (Static IP address assignment only)'
            gateway: ': (Optional) Gateway for vlan. Supports in Static IP address assignment only'
            ip_pools: ': (Optional) Manage IP Address Pool in NDB option if you want to assign static IP addresses to your database server VMs'
            ip_pools.end_ip: ': (Required) ending IP address range for new database servers'
            ip_pools.start_ip: ': (Required) starting IP address range for new database servers'
            managed: ': Managed by NDB or not'
            name: ': (Required) Name of the vlan to be attached in NDB'
            primary_dns: ': (Optional) primary dns for vlan. (Static IP address assignment only)'
            properties: ': properties of network'
            properties_map: ': properties map of network'
            secondary_dns: ': (Optional) secondary dns for vlan. (Static IP address assignment only)'
            stretched_vlan_id: ': stretched vlan id'
            subnet_mask: ': (Optional) Subnet mask for vlan. (Static IP address assignment only)'
            type: ': (Required) Vlan type. Supports [DHCP, Static]'
        importStatements: []
    nutanix_ndb_profile:
        subCategory: ""
        description: 'This operation submits a request to create, update and delete profiles in Nutanix database service (NDB). Note: For 1.8.0 release, only postgress database type is qualified and officially supported.'
        name: nutanix_ndb_profile
        title: nutanix_ndb_profile
        examples:
            - name: computeProfile
              manifest: |-
                {
                  "compute_profile": [
                    {
                      "core_per_cpu": 2,
                      "cpus": 1,
                      "memory_size": 2
                    }
                  ],
                  "description": "tf added compute",
                  "name": "compute-tf",
                  "published": true
                }
              dependencies:
                nutanix_ndb_database_parameter_profile.dbProfile: |-
                    {
                      "description": "database description",
                      "engine_type": "postgres_database",
                      "name": "dbParams-tf",
                      "postgres_database": [
                        {
                          "max_connections": "100",
                          "max_replication_slots": "10"
                        }
                      ]
                    }
            - name: networkProfile
              manifest: |-
                {
                  "description": "terraform created",
                  "engine_type": "postgres_database",
                  "name": "tf-net",
                  "network_profile": [
                    {
                      "postgres_database": [
                        {
                          "single_instance": [
                            {
                              "vlan_name": "vlan.154"
                            }
                          ]
                        }
                      ],
                      "topology": "single"
                    }
                  ],
                  "published": true
                }
              dependencies:
                nutanix_ndb_database_parameter_profile.dbProfile: |-
                    {
                      "description": "database description",
                      "engine_type": "postgres_database",
                      "name": "dbParams-tf",
                      "postgres_database": [
                        {
                          "max_connections": "100",
                          "max_replication_slots": "10"
                        }
                      ]
                    }
            - name: networkProfile
              manifest: |-
                {
                  "description": "terraform created",
                  "engine_type": "postgres_database",
                  "name": "tf-net",
                  "network_profile": [
                    {
                      "postgres_database": [
                        {
                          "ha_instance": [
                            {
                              "cluster_name": [
                                "{{ ClusterName }}"
                              ],
                              "num_of_clusters": "1",
                              "vlan_name": [
                                "{{ vlanName }}"
                              ]
                            }
                          ]
                        }
                      ],
                      "topology": "cluster"
                    }
                  ],
                  "published": true
                }
              dependencies:
                nutanix_ndb_database_parameter_profile.dbProfile: |-
                    {
                      "description": "database description",
                      "engine_type": "postgres_database",
                      "name": "dbParams-tf",
                      "postgres_database": [
                        {
                          "max_connections": "100",
                          "max_replication_slots": "10"
                        }
                      ]
                    }
            - name: softwareProfile
              manifest: |-
                {
                  "description": "description",
                  "engine_type": "postgres_database",
                  "name": "test-software",
                  "published": true,
                  "software_profile": [
                    {
                      "available_cluster_ids": [
                        "{{ cluster_ids }}"
                      ],
                      "postgres_database": [
                        {
                          "base_profile_version_description": "test1 desc",
                          "base_profile_version_name": "test1",
                          "source_dbserver_id": "{{ source_dbserver_id }}"
                        }
                      ],
                      "topology": "single"
                    }
                  ]
                }
              dependencies:
                nutanix_ndb_database_parameter_profile.dbProfile: |-
                    {
                      "description": "database description",
                      "engine_type": "postgres_database",
                      "name": "dbParams-tf",
                      "postgres_database": [
                        {
                          "max_connections": "100",
                          "max_replication_slots": "10"
                        }
                      ]
                    }
        argumentDocs:
            assoc_databases: ': associated databases of profiles'
            assoc_db_servers: ': associated database servers for associated profiles'
            cluster_availability: ': cluster availability of profile'
            compute_profile: ': (Optional) Compute Profile'
            compute_profile.core_per_cpu: ': (Optional) number of cores per vCPU for the database server VM.'
            compute_profile.cpus: ': (Optional) number of vCPUs for the database server VM.'
            compute_profile.memory_size: ': (Optional) amount of memory for the database server VM.'
            database_parameter_profile: ':  (Optional) Database Parameter Profile'
            database_parameter_profile.postgres_database: ': (Optional) Database parameters suuported for postgress.'
            database_parameter_profile.postgres_database.autovacuum: ': (Optional) Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, track_counts must also be enabled for autovacuum to work.'
            database_parameter_profile.postgres_database.autovacuum_freeze_max_age: ': (Optional) Age at which to autovacuum a table to prevent transaction ID wraparound. Default is 200000000'
            database_parameter_profile.postgres_database.autovacuum_max_workers: ': (Optional) Sets the maximum number of simultaneously running autovacuum worker processes. Default is 3'
            database_parameter_profile.postgres_database.autovacuum_vacuum_cost_delay: ': (Optional) Vacuum cost delay in milliseconds, for autovacuum. Specifies the cost delay value that will be used in automatic VACUUM operation. Default is 2ms'
            database_parameter_profile.postgres_database.autovacuum_vacuum_scale_factor: ': (Optional) Number of tuple updates or deletes prior to vacuum as a fraction of reltuples. Default is 0.2'
            database_parameter_profile.postgres_database.autovacuum_vacuum_threshold: ': (Optional) Min number of row updates before vacuum. Minimum number of tuple updates or deletes prior to vacuum. Take value in KB. Default is 50 .'
            database_parameter_profile.postgres_database.autovacuum_work_mem: ': (Optional) Sets the maximum memory to be used by each autovacuum worker process. Unit is in KB. Default is -1'
            database_parameter_profile.postgres_database.checkpoint_completion_target: |-
                : (Optional)
                Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval . Formula - (checkpoint_timeout - 2min) / checkpoint_timeout. The default is 0.5.
            database_parameter_profile.postgres_database.checkpoint_timeout: ': (Optional) Sets the maximum time between automatic WAL checkpoints . High Value gives Good Performance, but takes More Recovery Time, Reboot time. can reduce the I/O load on your system, especially when using large values for shared_buffers. Default is 5min'
            database_parameter_profile.postgres_database.effective_io_concurrency: ': (Optional) Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel.'
            database_parameter_profile.postgres_database.max_connections: ': (Optional) Determines the maximum number of concurrent connections to the database server. The default is set to 100'
            database_parameter_profile.postgres_database.max_locks_per_transaction: ': (Optional) This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. Default is 64.'
            database_parameter_profile.postgres_database.max_prepared_transactions: ': (Optional) Sets the maximum number of transactions that can be in the prepared state simultaneously. Setting this parameter to zero (which is the default) disables the prepared-transaction feature.'
            database_parameter_profile.postgres_database.max_replication_slots: ': (Optional) Specifies the maximum number of replication slots that the server can support. The default is zero. wal_level must be set to archive or higher to allow replication slots to be used. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting.'
            database_parameter_profile.postgres_database.max_wal_senders: ': (Optional) Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is 10.'
            database_parameter_profile.postgres_database.max_wal_size: ': (Optional) Maximum size to let the WAL grow to between automatic WAL checkpoints. The default is 1 GB'
            database_parameter_profile.postgres_database.max_worker_processes: ': (Optional) Sets the maximum number of background processes that the system can support. The default is 8.'
            database_parameter_profile.postgres_database.min_wal_size: ': (Optional) As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default is 80 MB.'
            database_parameter_profile.postgres_database.random_page_cost: ': (Optional) Sets the planner''s estimate of the cost of a nonsequentially fetched disk page. Sets the planner''s estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0.'
            database_parameter_profile.postgres_database.synchronous_commit: ': (Optional) Sets the current transaction''s synchronization level. Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a success indication to the client. Default is on.'
            database_parameter_profile.postgres_database.timezone: ': (Optional) Sets the time zone for displaying and interpreting time stamps. Defult is UTC .'
            database_parameter_profile.postgres_database.wal_buffers: |-
                : (Optional)
                Sets the number of disk-page buffers in shared memory for WAL. The amount of shared memory used for WAL data that has not yet been written to disk. The default is -1.
            database_parameter_profile.postgres_database.wal_keep_segments: ': (Optional) Sets the number of WAL files held for standby servers, Specifies the minimum number of past log file segments kept in the pg_wal directory. Default is 700 .'
            description: ': (Optional) Description of profile'
            engine_type: ': Engine Type of database'
            latest_version: ': latest version of profile'
            latest_version_id: ': latest version id of profile'
            name: ': (Required) Name of profile'
            network_profile: ': (Optional) Network Profile'
            network_profile.postgres_database: ': (Optional) Postgres Info to create network profile'
            network_profile.postgres_database.ha_instance: ': (Optional) Info for craeting Network profile for HA instance'
            network_profile.postgres_database.ha_instance.cluster_id: ': (Optional) specify the cluster ids associated with given VLANs'
            network_profile.postgres_database.ha_instance.cluster_name: ': (Required) specify the cluster name associated with given VLANs'
            network_profile.postgres_database.ha_instance.num_of_clusters: ': (Required) number of cluster attached to network profile'
            network_profile.postgres_database.ha_instance.vlan_name: ': (Required) specify the VLANs for network'
            network_profile.postgres_database.single_instance: ': (Optional) Info for postgres database to create single instance network profile.'
            network_profile.postgres_database.single_instance.enable_ip_address_selection: ': (Optional) If Advanced Network Segmentation is enabled, then this vLAN needs to be a static vLAN and needs to be true.'
            network_profile.postgres_database.single_instance.vlan_name: ': (Required) specify the VLAN to provide the IP address used to connect the database from the public network.'
            network_profile.topology: ': (Required) Topology supported for network profile. Allowed values are "cluster" and "single"'
            network_profile.version_cluster_association: ': (Optional) cluster associated with VLAN. this is used with Single instance for postgres database.'
            network_profile.version_cluster_association.nx_cluster_id: ': (Required) cluster id for associated VLAN.'
            nx_cluster_id: ': cluster on which profile created'
            owner: ': owner  of profile'
            published: ': (Optional) Publish for all users'
            software_profile: ': (Optional) Software Profile'
            software_profile.available_cluster_ids: ': specify Nutanix clusters where this profile is available.'
            software_profile.postgres_database: ': (Optional) Software profile info about postgres database.'
            software_profile.postgres_database.base_profile_version_description: ': description for the software profile version.'
            software_profile.postgres_database.base_profile_version_name: ': name for the software profile version.'
            software_profile.postgres_database.db_software_notes: ': a note to provide additional information about the database software.'
            software_profile.postgres_database.os_notes: ': a note to provide additional information about the operating system'
            software_profile.postgres_database.source_dbserver_id: ': source dbserver id where postgress software will be installed.'
            software_profile.topology: ': (Required) Topology of software profile. Allowed values are "cluster" and "single"'
            status: ': status of profile'
            versions: ': versions of associated profiles'
        importStatements: []
    nutanix_ndb_register_database:
        subCategory: ""
        description: It helps to register a source (production) database running on a Nutanix cluster with NDB. When you register a database with NDB, the database server VM (VM that hosts the source database) is also registered with NDB. After you have registered a database with NDB, a time machine is created for that database. This operation submits a request to register the database in Nutanix database service (NDB).
        name: nutanix_ndb_register_database
        title: nutanix_ndb_register_database
        examples:
            - name: name
              manifest: |-
                {
                  "category": "DEFAULT",
                  "database_name": "test-inst",
                  "database_type": "postgres_database",
                  "description": "added by terraform",
                  "postgress_info": [
                    {
                      "backup_policy": "prefer_secondary",
                      "db_name": "testdb1",
                      "db_password": "pass",
                      "db_user": "postgres",
                      "listener_port": "5432",
                      "postgres_software_home": "{{ directory where the PostgreSQL database software is installed.}}",
                      "software_home": "{{ directory where the PostgreSQL database software is installed. }}"
                    }
                  ],
                  "reset_description_in_nx_cluster": false,
                  "time_machine_info": [
                    {
                      "description": "description of tms",
                      "name": "test-pg-inst-regis",
                      "schedule": [
                        {
                          "continuousschedule": [
                            {
                              "enabled": true,
                              "logbackupinterval": 30,
                              "snapshotsperday": 1
                            }
                          ],
                          "monthlyschedule": [
                            {
                              "dayofmonth": "27",
                              "enabled": true
                            }
                          ],
                          "quartelyschedule": [
                            {
                              "dayofmonth": 27,
                              "enabled": true,
                              "startmonth": "JANUARY"
                            }
                          ],
                          "snapshottimeofday": [
                            {
                              "hours": 16,
                              "minutes": 0,
                              "seconds": 0
                            }
                          ],
                          "weeklyschedule": [
                            {
                              "dayofweek": "WEDNESDAY",
                              "enabled": true
                            }
                          ],
                          "yearlyschedule": [
                            {
                              "dayofmonth": 31,
                              "enabled": false,
                              "month": "DECEMBER"
                            }
                          ]
                        }
                      ],
                      "slaid": " {{ SLA ID}}"
                    }
                  ],
                  "vm_ip": "{{ vm_ip }}",
                  "working_directory": "/tmp"
                }
            - name: name
              manifest: |-
                {
                  "category": "DEFAULT",
                  "database_name": "test-inst",
                  "database_type": "postgres_database",
                  "description": "added by terraform",
                  "nx_cluster_id": "{{ cluster_ID }}",
                  "postgress_info": [
                    {
                      "backup_policy": "prefer_secondary",
                      "db_name": "testdb1",
                      "db_password": "pass",
                      "db_user": "postgres",
                      "listener_port": "5432",
                      "postgres_software_home": "{{ directory where the PostgreSQL database software is installed }}"
                    }
                  ],
                  "reset_description_in_nx_cluster": false,
                  "time_machine_info": [
                    {
                      "description": "description of tms",
                      "name": "test-pg-inst-regis",
                      "schedule": [
                        {
                          "continuousschedule": [
                            {
                              "enabled": true,
                              "logbackupinterval": 30,
                              "snapshotsperday": 1
                            }
                          ],
                          "monthlyschedule": [
                            {
                              "dayofmonth": "27",
                              "enabled": true
                            }
                          ],
                          "quartelyschedule": [
                            {
                              "dayofmonth": 27,
                              "enabled": true,
                              "startmonth": "JANUARY"
                            }
                          ],
                          "snapshottimeofday": [
                            {
                              "hours": 16,
                              "minutes": 0,
                              "seconds": 0
                            }
                          ],
                          "weeklyschedule": [
                            {
                              "dayofweek": "WEDNESDAY",
                              "enabled": true
                            }
                          ],
                          "yearlyschedule": [
                            {
                              "dayofmonth": 31,
                              "enabled": false,
                              "month": "DECEMBER"
                            }
                          ]
                        }
                      ],
                      "slaid": " {{ SLA ID}}"
                    }
                  ],
                  "vm_ip": "{{ vm_ip }}",
                  "vm_password": "{{ vm_password }}",
                  "vm_username": "{{ vm_username }}",
                  "working_directory": "/tmp"
                }
        argumentDocs:
            actionarguments: ': (Optional) action arguments'
            actionarguments.name: ': - (Required) name of argument'
            actionarguments.value: ': - (Required) value for argument'
            auto_tune_staging_drive: ': (Optional) auto tune staging drive. Default is true'
            category: ': (Optional) category of database. Default is "DEFAULT"'
            clone: ': whether instance is cloned or not'
            clustered: ': (Optional) clustered or not. Default is false'
            database_cluster_type: ': database cluster type'
            database_name: ': (Required) name of database'
            database_nodes: ': database nodes associated with database instance'
            database_status: ': status of database'
            database_type: ': (Required) type of database. Required value: postgres_database'
            databasetype: ': type of database'
            date_created: ': date created for db instance'
            date_modified: ': date modified for instance'
            dbserver_logical_cluster: ': dbserver logical cluster'
            dbserver_logical_cluster_id: ': dbserver logical cluster id'
            delete: :- (Optional) Delete the database from the VM. Default value is false
            delete_logical_cluster: :- (Optional) Delete the logical cluster. Default is true
            delete_time_machine: :- (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
            description: ': (Optional) description'
            forced: :- (Optional) Force delete of instance. Default is false
            forced_install: ': (Optional) forced install. Default:  true'
            info: ': info of instance'
            lcm_config: ': LCM config of instance'
            linked_databases: ': linked databases within database instance'
            metric: ': Stores storage info regarding size, allocatedSize, usedSize and unit of calculation that seems to have been fetched from PRISM.'
            name: ': Name of database instance'
            nx_cluster_id: :(Optional) cluster on which NDB is present
            parent_database_id: ': parent database id'
            parent_source_database_id: ': parent source database id'
            parent_time_machine_id: ': parent time machine id'
            postgress_info: ':  (Optional) Postgress_Info for registering.'
            postgress_info.allow_multiple_databases: ': (Optional) allow multiple databases. Default is true'
            postgress_info.backup_policy: ': (Optional) backup policy of database. Default is prefer_secondary.'
            postgress_info.db_name: ': (Required) name of the database server VM on which the instance you want to register is running.'
            postgress_info.db_password: ': (Required) database password'
            postgress_info.db_user: ': (Optional) username of the NDB drive user account that has sudo access.'
            postgress_info.listener_port: ': (Required) listner port of database'
            postgress_info.postgres_software_home: ': (Required) path to the PostgreSQL home directory in which the PostgreSQL software is installed.'
            postgress_info.software_home: ': (Optional) path to the directory in which the PostgreSQL software is installed.'
            postgress_info.switch_log: ': (Optional) switch log of database. Default is true'
            postgress_info.vm_ip: ': (Optional) VM IP of the database server VM on which the instance you want to register is running.'
            properties: ': properties of database created'
            remove: :- (Optional) Unregister the database from NDB. Default value is true
            reset_description_in_nx_cluster: ': (Optional) Reset description in cluster'
            soft_remove: :- (Optional) Soft remove. Default will be false
            status: ': status of instance'
            tags: ': (Optional) tags'
            time_machine: ': Time Machine details of instance'
            time_machine_id: ': time machine id of instance'
            time_machine_info: ': (Required) Time Machine info'
            time_machine_info.autotunelogdrive: ': - (Optional) enable auto tune log drive. Default: true'
            time_machine_info.description: ': - (Optional) description of time machine'
            time_machine_info.name: ': - (Required) name of time machine'
            time_machine_info.schedule: ': - (Optional) schedule for snapshots'
            time_machine_info.schedule.continuousschedule: ': - (Optional) snapshot freq and log config'
            time_machine_info.schedule.monthlyschedule: ': - (Optional) monthly snapshot config'
            time_machine_info.schedule.quartelyschedule: ': - (Optional) quaterly snapshot config'
            time_machine_info.schedule.snapshottimeofday: ': - (Optional) daily snapshot config'
            time_machine_info.schedule.weeklyschedule: ': - (Optional) weekly snapshot config'
            time_machine_info.schedule.yearlyschedule: ': - (Optional) yearly snapshot config'
            time_machine_info.sla_details: :-  (optional) SLA details for HA instance
            time_machine_info.sla_details.primary_sla: :- (Required) primary sla details
            time_machine_info.sla_details.primary_sla.nx_cluster_ids: '-: (Optioanl) cluster ids'
            time_machine_info.sla_details.primary_sla.sla_id: :- (Required) sla id
            time_machine_info.slaid: ': - (Optional) SLA ID for single instance'
            time_machine_info.tags: ': - (Optional) tags'
            time_zone: ': timezone on which instance is created xw'
            type: ': type of database'
            vm_description: ': (Optional) description for VM'
            vm_ip: ': (Required) IP address of dbserver VM'
            vm_password: ': (Optional) password of the NDB drive user account.'
            vm_sshkey: ': (Optional) ssh key for vm'
            vm_username: ': (Optional) username of the NDB drive user account that has sudo access.'
            working_directory: ': (Optional) working directory. Default is /tmp'
        importStatements: []
    nutanix_ndb_register_dbserver:
        subCategory: ""
        description: 'This operation submits a request to register the database server VM in Nutanix database service (NDB). Note: For 1.8.0 release, only postgress database type is qualified and officially supported.'
        name: nutanix_ndb_register_dbserver
        title: nutanix_ndb_register_dbserver
        examples:
            - name: name
              manifest: |-
                {
                  "database_type": "postgres_database",
                  "nxcluster_id": "{{ cluster_id }}",
                  "password": "{{ password of the NDB drive user account }}",
                  "postgres_database": [
                    {
                      "listener_port": {},
                      "postgres_software_home": "{{ path to the PostgreSQL home directory in which the PostgreSQL software is installed }}"
                    }
                  ],
                  "username": "{{ username of the NDB drive user account }}",
                  "vm_ip": "{{ vmip to register}}"
                }
        argumentDocs:
            client_id: ':  client id'
            database_type: ': (Required) database type i.e. postgres_database'
            dbserver_cluster_id: ': dbserver cluster id.'
            delete: :- (Optional) Delete the VM and associated storage. Default value is false
            delete_vgs: :- (Optional) Delete volume grous. Default value is true
            delete_vm_snapshots: :- (Optional) Delete the vm snapshots. Default is true
            description: ': (Optional) description of db server vm. Should be used in update Method only .'
            era_created: ': created by era or not.'
            era_drive_id: ': era drive id'
            era_version: ': era version'
            forced_install: ': (Optional) forced install the packages. Default is true'
            internal: ': is internal or not.'
            ip_addresses: ': IP addresses of the dbserver vm'
            mac_addresses: ': Mac addresses of dbserver vm'
            name: ': (Optional) Name of db server vm. Should be used in Update Method only.'
            nxcluster_id: ': (Required) cluster on which you want to register the database server VM.'
            password: ': (Optional) password of the NDB drive user account. Conflicts with ssh_key.'
            postgres_database: ': (Optional) postgres info for dbserver'
            postgres_database.listener_port: ': (Optional) listener port of db server'
            postgres_database.postgres_software_home: ': (Required) path to the PostgreSQL home directory in which the PostgreSQL software is installed'
            properties: ': Properties of dbserver vm'
            remove: :- (Optional) Unregister the database from NDB. Default value is true
            soft_remove: :- (Optional) Soft remove. Default will be false
            ssh_key: ': (Optional) the private key. Conflicts with password.'
            status: ': Status of Dbserver . Active or not.'
            type: ': Type of entity. i.e. Dbserver'
            update_name_description_in_cluster: ': (Optional) Updates the name and description in cluster. Should be used in Update Method only.'
            username: ': (Required) username of the NDB drive user account that has sudo access'
            vm_cluster_name: ': cluster name for dbserver vm'
            vm_cluster_uuid: ': clusetr uuid for dbserver vm'
            vm_ip: ': (Required) IP address of the database server VM'
            vm_timezone: ':  timezone of dbserver vm'
            working_directory: ': (Optional) working directory of postgres. Default is "/tmp"'
        importStatements: []
    nutanix_ndb_sla:
        subCategory: ""
        description: SLAs are data retention policies that allow you to specify how long the daily, weekly, monthly, and quarterly snapshots are retained in NDB. This operation submits a request to create, update and delete slas in Nutanix database service (NDB).
        name: nutanix_ndb_sla
        title: nutanix_ndb_sla
        examples:
            - name: sla
              manifest: |-
                {
                  "continuous_retention": 30,
                  "daily_retention": 3,
                  "description": "here goes description",
                  "monthly_retention": 1,
                  "name": "test-sla",
                  "quarterly_retention": 1,
                  "weekly_retention": 2
                }
        argumentDocs:
            continuous_retention: ': (Optional) Duration in days for which transaction logs are retained in NDB.'
            current_active_frequency: ': slas current frequency'
            daily_retention: ': (Optional) Duration in days for which a daily snapshot must be retained in NDB.'
            date_created: ': sla created data'
            date_modified: ': sla last modified date'
            description: ': (Optional) Description of profile'
            monthly_retention: ': (Optional) Duration in months for which a monthly snapshot must be retained in NDB'
            name: ': (Required) Name of profile'
            owner_id: ': owner id'
            pitr_enabled: ': pitr enabled'
            quarterly_retention: ': (Optional) Duration in number of quarters for which a quarterly snapshot must be retained in NDB.'
            reference_count: ': reference count'
            system_sla: ': refers whether sla is custom or built-in'
            unique_name: ': name of sla'
            weekly_retention: ': (Optional) Duration in weeks for which a weekly snapshot must be retained in NDB.'
            yearly_retention: ': (Optional) Not supported as of now.'
        importStatements: []
    nutanix_ndb_software_version_profile:
        subCategory: ""
        description: This operation submits a request to create, update and delete software profile versions in Nutanix database service (NDB).
        name: nutanix_ndb_software_version_profile
        title: nutanix_ndb_software_version_profile
        examples:
            - name: name
              manifest: |-
                {
                  "available_cluster_ids": [
                    "{{ cluster_ids }}"
                  ],
                  "description": "made  by tf",
                  "engine_type": "postgres_database",
                  "name": "test-tf",
                  "postgres_database": [
                    {
                      "source_dbserver_id": "{{ DB_Server_ID }}"
                    }
                  ],
                  "profile_id": "${resource.nutanix_ndb_profile.name12.id}",
                  "status": "published"
                }
              references:
                profile_id: resource.nutanix_ndb_profile.name12.id
        argumentDocs:
            available_cluster_ids: ': available cluster ids'
            db_version: ': Db version of software profile'
            deprecated: ': deprecated or not'
            description: ': description of profile'
            engine_type: ': engine type of profile'
            name: ': Name of profile'
            owner: ': owner  of profile'
            postgres_database: ': postgres database info'
            postgres_database.db_software_notes: ': (Optional) db software notes'
            postgres_database.os_notes: ': (Optional) os notes for software profile'
            postgres_database.source_dbserver_id: ': (Optional) source dbserver id'
            profile_id: ': (Required) profile id'
            properties: ': properties of profile'
            properties.name: ': name of property'
            properties.secure: ': secure or not'
            properties.value: ': value of property'
            properties_map: ': properties map of profile'
            published: ': Published or not'
            status: ': status of profile. Allowed Values are "deprecated", "published", "unpublished"'
            system_profile: ': system profile or not.'
            topology: ': topology of software profile'
            version: ': Version of software profile'
            version_cluster_association: ': version cluster association'
            version_cluster_association.date_created: ': date created of profile'
            version_cluster_association.date_modified: ': date modified of profile'
            version_cluster_association.nx_cluster_id: ': nutanix cluster id'
            version_cluster_association.optimized_for_provisioning: ': version optimized for provisioning'
            version_cluster_association.owner_id: ': owner id'
            version_cluster_association.profile_version_id: ': profile version id'
            version_cluster_association.properties: ': properties of software profile'
            version_cluster_association.status: ': status of version'
        importStatements: []
    nutanix_ndb_stretched_vlan:
        subCategory: ""
        description: This operation submits a request to create, update and delete stretched vlans in Nutanix database service (NDB). We can add a stretched VLAN to NDB by selecting the existing VLANs from each Nutanix cluster.
        name: nutanix_ndb_stretched_vlan
        title: nutanix_ndb_stretched_vlan
        examples:
            - name: name
              manifest: |-
                {
                  "description": "vlan desc updated",
                  "name": "test-stretcName",
                  "type": "Static",
                  "vlan_ids": [
                    "{{ vlan_id_1 }}",
                    "{{ vlan_id_2 }}"
                  ]
                }
            - name: name
              manifest: |-
                {
                  "description": "vlan desc updated",
                  "metadata": [
                    {
                      "gateway": "{{ gateway of vlans }}",
                      "subnet_mask": "{{ subnet mask of vlans }}"
                    }
                  ],
                  "name": "test-stretcName",
                  "type": "Static",
                  "vlan_ids": [
                    "{{ vlan_id_1 }}",
                    "{{ vlan_id_2 }}"
                  ]
                }
        argumentDocs:
            description: ': (Optional) Description of stretched vlan'
            metadata: ': (Optional) Update the stretched VLAN Gateway and Subnet Mask IP address'
            metadata.gateway: ': Update the gateway of stretched vlan'
            metadata.subnet_mask: ': Update the subnet_mask of stretched vlan'
            name: ': (Required) name for the stretched VLAN'
            type: ': (Required) type of vlan. static VLANs that are managed in NDB can be added to a stretched VLAN.'
            vlan_ids: ': (Required) list of vlan ids to be added in NDB'
            vlans_list: ': properties of vlans'
            vlans_list.cluster_id: ': cluster id where network is present'
            vlans_list.id: ': network id'
            vlans_list.managed: ': network managed by NDB or not'
            vlans_list.name: ': network name'
            vlans_list.properties: ': properties of network'
            vlans_list.properties_map: ': properties map of network'
            vlans_list.properties_map.vlan_gateway: ': gateway of vlan'
            vlans_list.properties_map.vlan_primary_dns: ': primary dns of vlan'
            vlans_list.properties_map.vlan_secondary_dns: ': secondary dns of vlan'
            vlans_list.properties_map.vlan_subnet_mask: ': subnet mask of vlan'
            vlans_list.stretched_vlan_id: ': stretched vlan id'
            vlans_list.type: ': type of network'
        importStatements: []
    nutanix_ndb_tag:
        subCategory: ""
        description: NDB allows you to assign metadata to entities (clones, time machines, databases, and database servers) by using tags. When you are cloning a database, you can associate tags with the database that you are creating. This operation submits a request to create, update and delete tags in Nutanix database service (NDB).
        name: nutanix_ndb_tag
        title: nutanix_ndb_tag
        examples:
            - name: name
              manifest: |-
                {
                  "description": "this is desc ok",
                  "entity_type": "DATABASE",
                  "name": "testst-up",
                  "required": true
                }
            - name: name
              manifest: |-
                {
                  "description": "this is desc ok",
                  "entity_type": "DATABASE",
                  "name": "testst-up",
                  "required": true,
                  "status": "DEPRECATED"
                }
        argumentDocs:
            date_created: ': date created of the tag'
            date_modified: ': modified date of tha tag'
            description: ': (Optional) description for the tag'
            entity_type: ': (Required) entity for the tag to be associated with. Supported values [ DATABASE, TIME_MACHINE, CLONE, DATABASE_SERVER ].'
            name: ': (Required) name for the tag'
            owner: ': owner id of the tag'
            required: ': (Optional) provide a tag value for entities.'
            status: ': (Optional)Status of the tag. Supported values are [ ENABLED, DEPRECATED ]'
            values: ': value for the tag'
        importStatements: []
    nutanix_ndb_tms_cluster:
        subCategory: ""
        description: NDB multi-cluster allows you to manage time machine data availability across all the registered Nutanix clusters in NDB. This operation submits a request to add, update and delete clusters in time machine data availability for Nutanix database service (NDB).
        name: nutanix_ndb_tms_cluster
        title: nutanix_ndb_tms_cluster
        examples:
            - name: cls
              manifest: |-
                {
                  "nx_cluster_id": "{{ cluster_id }}",
                  "sla_id": "{{ sla_id }}",
                  "time_machine_id": "{{ tms_id }}"
                }
        argumentDocs:
            date_created: ': created date of time machine associated with cluster'
            date_modified: ': modified date of time machine associated with cluster'
            description: ': description of nutanix cluster associated with time machine'
            log_drive_id: ': log drive id'
            log_drive_status: ': log drive status of time machine'
            nx_cluster_id: ': (Required) Nutanix cluster id on the associated registered clusters.'
            owner_id: ': owner id'
            schedule_id: ': schedule id of the data associated with time machine'
            sla_id: ': (Required) SLA id for the associated cluster.'
            source: ': source is present or not'
            source_clusters: ': source clusters in time machines'
            status: ': status of the cluster associated with time machine'
            time_machine_id: ': (Required) time machine id'
            type: ':  (Optional) Default value is "OTHER"'
        importStatements: []
    nutanix_network_security_rule:
        subCategory: ""
        description: Provides a Nutanix Network Security Rule resource to Create a Network Security Rule .
        name: nutanix_network_security_rule
        title: nutanix_network_security_rule
        examples:
            - name: isolation
              manifest: |-
                {
                  "description": "Isolation Rule Example",
                  "isolation_rule_action": "APPLY",
                  "isolation_rule_first_entity_filter_kind_list": [
                    "vm"
                  ],
                  "isolation_rule_first_entity_filter_params": [
                    {
                      "name": "Environment",
                      "values": [
                        "Dev"
                      ]
                    }
                  ],
                  "isolation_rule_first_entity_filter_type": "CATEGORIES_MATCH_ALL",
                  "isolation_rule_second_entity_filter_kind_list": [
                    "vm"
                  ],
                  "isolation_rule_second_entity_filter_params": [
                    {
                      "name": "Environment",
                      "values": [
                        "Production"
                      ]
                    }
                  ],
                  "isolation_rule_second_entity_filter_type": "CATEGORIES_MATCH_ALL",
                  "name": "example-isolation-rule"
                }
            - name: TEST-TIER
              manifest: |-
                {
                  "app_rule_action": "APPLY",
                  "app_rule_inbound_allow_list": [
                    {
                      "filter_kind_list": [
                        "vm"
                      ],
                      "filter_params": [
                        {
                          "name": "${nutanix_category_key.test-category-key.id}",
                          "values": [
                            "${nutanix_category_value.WEB.id}"
                          ]
                        }
                      ],
                      "filter_type": "CATEGORIES_MATCH_ALL",
                      "peer_specification_type": "FILTER"
                    }
                  ],
                  "app_rule_outbound_allow_list": [
                    {
                      "filter_kind_list": [
                        "vm"
                      ],
                      "filter_params": [
                        {
                          "name": "${nutanix_category_key.test-category-key.id}",
                          "values": [
                            "${nutanix_category_value.DB.id}"
                          ]
                        }
                      ],
                      "filter_type": "CATEGORIES_MATCH_ALL",
                      "peer_specification_type": "FILTER"
                    }
                  ],
                  "app_rule_target_group_default_internal_policy": "DENY_ALL",
                  "app_rule_target_group_filter_kind_list": [
                    "vm"
                  ],
                  "app_rule_target_group_filter_params": [
                    {
                      "name": "${nutanix_category_key.test-category-key.id}",
                      "values": [
                        "${nutanix_category_value.APP.id}"
                      ]
                    },
                    {
                      "name": "${nutanix_category_key.USER.id}",
                      "values": [
                        "${nutanix_category_value.group.id}"
                      ]
                    },
                    {
                      "name": "AppType",
                      "values": [
                        "Default"
                      ]
                    }
                  ],
                  "app_rule_target_group_filter_type": "CATEGORIES_MATCH_ALL",
                  "app_rule_target_group_peer_specification_type": "FILTER",
                  "depends_on": [
                    "${nutanix_virtual_machine.vm-app}",
                    "${nutanix_virtual_machine.vm-web}",
                    "${nutanix_virtual_machine.vm-db}"
                  ],
                  "description": "rule 1 tiers",
                  "name": "RULE-1-TIERS"
                }
              dependencies:
                nutanix_category_key.USER: |-
                    {
                      "description": "user Category Key",
                      "name": "user"
                    }
                nutanix_category_key.test-category-key: |-
                    {
                      "description": "TIER Category Key",
                      "name": "TIER-1"
                    }
                nutanix_category_value.APP: |-
                    {
                      "description": "APP Category Value",
                      "name": "${nutanix_category_key.test-category-key.id}",
                      "value": "APP-1"
                    }
                nutanix_category_value.DB: |-
                    {
                      "description": "DB Category Value",
                      "name": "${nutanix_category_key.test-category-key.id}",
                      "value": "DB-1"
                    }
                nutanix_category_value.WEB: |-
                    {
                      "description": "WEB Category Value",
                      "name": "${nutanix_category_key.test-category-key.id}",
                      "value": "WEB-1"
                    }
                nutanix_category_value.group: |-
                    {
                      "description": "group Category Value",
                      "name": "${nutanix_category_key.USER.id}",
                      "value": "group-1"
                    }
                nutanix_image.cirros-034-disk: |-
                    {
                      "description": "heres a tiny linux image, not an iso, but a real disk!",
                      "name": "test-image-vm-create-flow",
                      "source_uri": "http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img"
                    }
                nutanix_virtual_machine.vm-app: |-
                    {
                      "categories": [
                        {
                          "name": "Environment",
                          "value": "Staging"
                        },
                        {
                          "name": "TIER-1",
                          "value": "${nutanix_category_value.APP.id}"
                        }
                      ],
                      "cluster_uuid": "${local.cluster_uuid}",
                      "disk_list": [
                        {
                          "data_source_reference": {
                            "kind": "image",
                            "uuid": "${nutanix_image.cirros-034-disk.id}"
                          },
                          "device_properties": [
                            {
                              "device_type": "DISK",
                              "disk_address": {
                                "adapter_type": "SCSI",
                                "device_index": 0
                              }
                            }
                          ]
                        }
                      ],
                      "memory_size_mib": 186,
                      "name": "test-dou-vm-flow-APP-1",
                      "nic_list": [
                        {
                          "subnet_uuid": "c56b535c-8aff-4435-ae85-78e64a07f76d"
                        }
                      ],
                      "num_sockets": 1,
                      "num_vcpus_per_socket": 1
                    }
                nutanix_virtual_machine.vm-db: |-
                    {
                      "categories": [
                        {
                          "name": "Environment",
                          "value": "Staging"
                        },
                        {
                          "name": "TIER-1",
                          "value": "${nutanix_category_value.DB.id}"
                        }
                      ],
                      "cluster_uuid": "${local.cluster_uuid}",
                      "disk_list": [
                        {
                          "data_source_reference": {
                            "kind": "image",
                            "uuid": "${nutanix_image.cirros-034-disk.id}"
                          },
                          "device_properties": [
                            {
                              "device_type": "DISK",
                              "disk_address": {
                                "adapter_type": "SCSI",
                                "device_index": 0
                              }
                            }
                          ]
                        }
                      ],
                      "memory_size_mib": 186,
                      "name": "test-dou-vm-flow-DB-1",
                      "nic_list": [
                        {
                          "subnet_uuid": "c56b535c-8aff-4435-ae85-78e64a07f76d"
                        }
                      ],
                      "num_sockets": 1,
                      "num_vcpus_per_socket": 1
                    }
                nutanix_virtual_machine.vm-web: |-
                    {
                      "categories": [
                        {
                          "name": "Environment",
                          "value": "Staging"
                        },
                        {
                          "name": "TIER-1",
                          "value": "${nutanix_category_value.WEB.id}"
                        }
                      ],
                      "cluster_uuid": "${local.cluster_uuid}",
                      "disk_list": [
                        {
                          "data_source_reference": {
                            "kind": "image",
                            "uuid": "${nutanix_image.cirros-034-disk.id}"
                          },
                          "device_properties": [
                            {
                              "device_type": "DISK",
                              "disk_address": {
                                "adapter_type": "SCSI",
                                "device_index": 0
                              }
                            }
                          ]
                        }
                      ],
                      "memory_size_mib": 186,
                      "name": "test-dou-vm-flow-WEB-1",
                      "nic_list": [
                        {
                          "subnet_uuid": "c56b535c-8aff-4435-ae85-78e64a07f76d"
                        }
                      ],
                      "num_sockets": 1,
                      "num_vcpus_per_socket": 1
                    }
            - name: VDI
              manifest: |-
                {
                  "ad_rule_action": "APPLY",
                  "ad_rule_inbound_allow_list": [
                    {
                      "ip_subnet": "10.0.0.0",
                      "ip_subnet_prefix_length": "8",
                      "peer_specification_type": "IP_SUBNET",
                      "protocol": "ALL"
                    }
                  ],
                  "ad_rule_outbound_allow_list": [
                    {
                      "address_group_inclusion_list": [
                        {
                          "kind": "address_group",
                          "uuid": "${nutanix_address_group.address1.id}"
                        }
                      ],
                      "peer_specification_type": "ALL",
                      "service_group_list": [
                        {
                          "kind": "service_group",
                          "uuid": "${nutanix_service_group.service1.id}"
                        }
                      ]
                    }
                  ],
                  "ad_rule_target_group_default_internal_policy": "DENY_ALL",
                  "ad_rule_target_group_filter_kind_list": [
                    "vm"
                  ],
                  "ad_rule_target_group_filter_params": [
                    {
                      "name": "AD",
                      "values": [
                        "AD"
                      ]
                    }
                  ],
                  "ad_rule_target_group_filter_type": "CATEGORIES_MATCH_ALL",
                  "ad_rule_target_group_peer_specification_type": "FILTER",
                  "depends_on": [
                    "${nutanix_category_value.ad-group-user-1}"
                  ],
                  "description": "test",
                  "name": "nsr-1"
                }
              references:
                ad_rule_outbound_allow_list.address_group_inclusion_list.uuid: nutanix_address_group.address1.id
                ad_rule_outbound_allow_list.service_group_list.uuid: nutanix_service_group.service1.id
              dependencies:
                nutanix_address_group.address1: |-
                    {
                      "description": "test",
                      "ip_address_block_list": [
                        {
                          "ip": "10.0.0.0",
                          "prefix_length": 24
                        }
                      ],
                      "name": "addr-1"
                    }
                nutanix_category_value.ad-group-user-1: |-
                    {
                      "description": "group user category value",
                      "name": "AD",
                      "value": "AD"
                    }
                nutanix_service_group.service1: |-
                    {
                      "description": "test",
                      "name": "srv-1",
                      "service_list": [
                        {
                          "protocol": "TCP",
                          "tcp_port_range_list": [
                            {
                              "end_port": 22,
                              "start_port": 22
                            },
                            {
                              "end_port": 2222,
                              "start_port": 2222
                            }
                          ]
                        }
                      ]
                    }
        argumentDocs:
            UUID: ': - image UUID.'
            ad_rule_action: ': - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.'
            ad_rule_inbound_allow_list: ': - (Optional) The set of categories that matching VMs need to have.'
            ad_rule_outbound_allow_list: ': - (Optional)'
            ad_rule_target_group_default_internal_policy: ': - (Optional) - Default policy for communication within target group.'
            ad_rule_target_group_filter_kind_list: ': - (Optional) - List of kinds associated with this filter.'
            ad_rule_target_group_filter_params: ': - (Optional) - A list of category key and list of values.'
            ad_rule_target_group_filter_type: ': - (Optional) - The type of the filter being used.'
            ad_rule_target_group_peer_specification_type: ': - (Optional) - Way to identify the object for which rule is applied.'
            api_version: '- The version of the API.'
            app_rule_action: ': - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.'
            app_rule_inbound_allow_list: ': - (Optional) The set of categories that matching VMs need to have.'
            app_rule_outbound_allow_list: ': - (Optional)'
            app_rule_target_group_default_internal_policy: ': - (Optional) - Default policy for communication within target group.'
            app_rule_target_group_filter_kind_list: ': - (Optional) - List of kinds associated with this filter.'
            app_rule_target_group_filter_params: ': - (Optional) - A list of category key and list of values.'
            app_rule_target_group_filter_type: ': - (Optional) - The type of the filter being used.'
            app_rule_target_group_peer_specification_type: ': - (Optional) - Way to identify the object for which rule is applied.'
            categories: ': - (Optional) Categories for the network_security_rule.'
            creation_time: ': - UTC date and time in RFC-3339 format when image was created.'
            description: ': - (Optional) A description for network_security_rule.'
            isolation_rule_action: ': - (Optional) - These rules are used for environmental isolation.'
            isolation_rule_first_entity_filter_kind_list: ': - (Optional) - List of kinds associated with this filter.'
            isolation_rule_first_entity_filter_params: ': - (Optional) - A list of category key and list of values.'
            isolation_rule_first_entity_filter_type: ': - (Optional) - The type of the filter being used.'
            isolation_rule_second_entity_filter_kind_list: ': - (Optional) - List of kinds associated with this filter.'
            isolation_rule_second_entity_filter_params: ': - (Optional) - A list of category key and list of values.'
            isolation_rule_second_entity_filter_type: ': - (Optional) - The type of the filter being used.'
            kind: ': - The kind name (Default value: project)(Required).'
            last_update_time: ': - UTC date and time in RFC-3339 format when image was last updated.'
            metadata: ': - The network_security_rule kind metadata.'
            name: ': - (Required) The name for the network_security_rule.'
            owner_reference: ': - (Optional) The reference to a user.'
            project_reference: ': - (Optional) The reference to a project.'
            quarantine_rule_action: ': - (Optional) These rules are used for quarantining suspected VMs. Target group is a required attribute. Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.'
            quarantine_rule_inbound_allow_list: ': - (Optional)'
            quarantine_rule_outbound_allow_list: ': - (Optional)'
            quarantine_rule_target_group_default_internal_policy: ': - (Optional) - Default policy for communication within target group.'
            quarantine_rule_target_group_filter_kind_list: ': - (Optional) - List of kinds associated with this filter.'
            quarantine_rule_target_group_filter_params: ': - (Optional) - A list of category key and list of values.'
            quarantine_rule_target_group_filter_type: ': - (Optional) - The type of the filter being used.'
            quarantine_rule_target_group_peer_specification_type: ': - (Optional) - Way to identify the object for which rule is applied.'
            retrieval_uri_list: ': - List of URIs where the raw network_security_rule data can be accessed.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            size_bytes: ': - The size of the network_security_rule in bytes.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - The state of the Network Security Rule.'
            uuid: ': - the UUID(Required).'
        importStatements: []
    nutanix_pbr:
        subCategory: ""
        description: Create Policy Based Routing within VPCs .
        name: nutanix_pbr
        title: nutanix_pbr
        examples:
            - name: pbr
              manifest: |-
                {
                  "action": "PERMIT",
                  "destination": [
                    {
                      "address_type": "ALL"
                    }
                  ],
                  "name": "test-policy-1",
                  "priority": 123,
                  "protocol_type": "ALL",
                  "source": [
                    {
                      "address_type": "ALL"
                    }
                  ],
                  "vpc_name": "test123"
                }
            - name: pbr2
              manifest: |-
                {
                  "action": "REROUTE",
                  "destination": [
                    {
                      "prefix_length": 24,
                      "subnet_ip": "1.2.2.0"
                    }
                  ],
                  "name": "test2",
                  "priority": 132,
                  "protocol_parameters": [
                    {
                      "tcp": [
                        {
                          "destination_port_range_list": [
                            {
                              "end_port": 40,
                              "start_port": 40
                            }
                          ],
                          "source_port_range_list": [
                            {
                              "end_port": 50,
                              "start_port": 50
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "protocol_type": "TCP",
                  "service_ip_list": [
                    "10.x.x.xx"
                  ],
                  "source": [
                    {
                      "address_type": "INTERNET"
                    }
                  ],
                  "vpc_reference_uuid": "1"
                }
        argumentDocs:
            UUID: ': - subnet UUID.'
            action: '- (Required) Routing policy action. Must be one of {DENY, PERMIT, REROUTE} .'
            address: '- (Optional) address type of source. Should be one of {INTERNET, ALL}.'
            api_version: '- The version of the API.'
            creation_time: ': - UTC date and time in RFC-3339 format when subnet was created.'
            destination_port_range: '- (Required) Range of TCP/UDP ports.'
            end_port: '- (Required) end port number'
            icmp: '- (Optional) ICMP parameters in routing policy.'
            is_bidirectional: '- (Optional) Additionally create Policy in reverse direction. Should be used with {TCP, UDP with start and end port ranges and ICMP with icmp code and type}. Supported with 2022.x.'
            last_update_time: ': - UTC date and time in RFC-3339 format when subnet was last updated.'
            metadata: '- The routing policies kind metadata.'
            name: '- (Required) name of policy'
            prefix_length: '- (Optional) prefix length of provided subnet.'
            priority: '- (Required) priority of policy'
            protocol_number: '- (Optional) Protocol number in routing policy'
            protocol_type: '- (Required) Protocol type of policy based routing. Must be one of {TCP, UDP, ICMP, PROTOCOL_NUMBER, ALL} .'
            service_ip_list: '- (Optional) IP addresses of network services. This field is valid only when action is REROUTE.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            source_port_range: '- (Required) Range of TCP/UDP ports.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            start_port: '- (Required) start port number'
            subnet_ip: '- (Optional) IP subnet provided as an address.'
            tcp: '- (Optional) TCP parameters in routing policy'
            udp: '- (Optional) UDP parameters in routing policy'
            vpc_name: '- (Required) The reference to a vpc. Should not be used with {vpc_reference_uuid}'
            vpc_reference_uuid: '- (Required) The reference to a vpc . Should not be used with {vpc_name} .'
        importStatements: []
    nutanix_project:
        subCategory: ""
        description: Provides a Nutanix Category key resource to Create a Project.
        name: nutanix_project
        title: nutanix_project
        examples:
            - name: project_test
              manifest: |-
                {
                  "api_version": "3.1",
                  "categories": [
                    {
                      "name": "Environment",
                      "value": "Staging"
                    }
                  ],
                  "default_subnet_reference": [
                    {
                      "uuid": "${nutanix_subnet.subnet.metadata.uuid}"
                    }
                  ],
                  "description": "This is my project",
                  "name": "my-project",
                  "resource_domain": [
                    {
                      "resources": [
                        {
                          "limit": 4,
                          "resource_type": "STORAGE"
                        }
                      ]
                    }
                  ]
                }
              references:
                default_subnet_reference.uuid: nutanix_subnet.subnet.metadata.uuid
              dependencies:
                nutanix_subnet.subnet: |-
                    {
                      "cluster_uuid": "",
                      "default_gateway_ip": "10.250.140.1",
                      "description": "Description of my unit test VLAN",
                      "dhcp_domain_name_server_list": [
                        "8.8.8.8",
                        "4.2.2.2"
                      ],
                      "dhcp_domain_search_list": [
                        "terraform.nutanix.com",
                        "terraform.unit.test.com"
                      ],
                      "dhcp_options": {
                        "boot_file_name": "bootfile",
                        "domain_name": "nutanix",
                        "tftp_server_name": "10.250.140.200"
                      },
                      "name": "sunet_test_name",
                      "prefix_length": 24,
                      "subnet_ip": "10.250.140.0",
                      "subnet_type": "VLAN",
                      "vlan_id": 31
                    }
            - name: project_test
              manifest: |-
                {
                  "acp": [
                    {
                      "description": "{{description}}",
                      "name": "{{acp_name}}",
                      "role_reference": [
                        {
                          "kind": "role",
                          "name": "Developer",
                          "uuid": "{{role_uuid}}"
                        }
                      ],
                      "user_reference_list": [
                        {
                          "kind": "user",
                          "name": "{{user_name}}",
                          "uuid": "{{user_uuid}}"
                        }
                      ]
                    }
                  ],
                  "api_version": "3.1",
                  "cluster_uuid": "",
                  "default_subnet_reference": [
                    {
                      "uuid": "${nutanix_subnet.subnet.metadata.uuid}"
                    }
                  ],
                  "description": "This is my project",
                  "name": "my-project",
                  "subnet_reference_list": [
                    {
                      "uuid": "${resource.nutanix_subnet.sub.id}"
                    }
                  ],
                  "use_project_internal": true,
                  "user_reference_list": [
                    {
                      "kind": "user",
                      "name": "{{user_name}}",
                      "uuid": "{{user_uuid}}"
                    }
                  ]
                }
              references:
                default_subnet_reference.uuid: nutanix_subnet.subnet.metadata.uuid
                subnet_reference_list.uuid: resource.nutanix_subnet.sub.id
              dependencies:
                nutanix_subnet.subnet: |-
                    {
                      "cluster_uuid": "",
                      "default_gateway_ip": "10.250.140.1",
                      "description": "Description of my unit test VLAN",
                      "dhcp_domain_name_server_list": [
                        "8.8.8.8",
                        "4.2.2.2"
                      ],
                      "dhcp_domain_search_list": [
                        "terraform.nutanix.com",
                        "terraform.unit.test.com"
                      ],
                      "dhcp_options": {
                        "boot_file_name": "bootfile",
                        "domain_name": "nutanix",
                        "tftp_server_name": "10.250.140.200"
                      },
                      "name": "sunet_test_name",
                      "prefix_length": 24,
                      "subnet_ip": "10.250.140.0",
                      "subnet_type": "VLAN",
                      "vlan_id": 31
                    }
            - name: project_test
              manifest: |-
                {
                  "acp": [
                    {
                      "description": "{{description}}",
                      "name": "{{acp_name}}",
                      "role_reference": [
                        {
                          "kind": "role",
                          "name": "Developer",
                          "uuid": "{{role_uuid}}"
                        }
                      ],
                      "user_reference_list": [
                        {
                          "kind": "user",
                          "name": "{{user_name}}",
                          "uuid": "{{user_uuid}}"
                        }
                      ]
                    }
                  ],
                  "api_version": "3.1",
                  "cluster_uuid": "",
                  "default_subnet_reference": [
                    {
                      "uuid": "${nutanix_subnet.subnet.metadata.uuid}"
                    }
                  ],
                  "description": "This is my project",
                  "name": "my-project",
                  "subnet_reference_list": [
                    {
                      "uuid": "${resource.nutanix_subnet.sub.id}"
                    }
                  ],
                  "use_project_internal": true,
                  "user_list": [
                    {
                      "directory_service_user": [
                        {
                          "directory_service_reference": [
                            {
                              "kind": "directory_service",
                              "uuid": "{{ DIRECTORY SERVICE UUID }}"
                            }
                          ],
                          "user_principal_name": "{{ Name of user }}"
                        }
                      ],
                      "metadata": {
                        "kind": "user",
                        "uuid": "{{ UUID of the USER }}"
                      }
                    }
                  ],
                  "user_reference_list": [
                    {
                      "kind": "user",
                      "name": "{{user_name}}",
                      "uuid": "{{user_uuid}}"
                    }
                  ]
                }
              references:
                default_subnet_reference.uuid: nutanix_subnet.subnet.metadata.uuid
                subnet_reference_list.uuid: resource.nutanix_subnet.sub.id
              dependencies:
                nutanix_subnet.subnet: |-
                    {
                      "cluster_uuid": "",
                      "default_gateway_ip": "10.250.140.1",
                      "description": "Description of my unit test VLAN",
                      "dhcp_domain_name_server_list": [
                        "8.8.8.8",
                        "4.2.2.2"
                      ],
                      "dhcp_domain_search_list": [
                        "terraform.nutanix.com",
                        "terraform.unit.test.com"
                      ],
                      "dhcp_options": {
                        "boot_file_name": "bootfile",
                        "domain_name": "nutanix",
                        "tftp_server_name": "10.250.140.200"
                      },
                      "name": "sunet_test_name",
                      "prefix_length": 24,
                      "subnet_ip": "10.250.140.0",
                      "subnet_type": "VLAN",
                      "vlan_id": 31
                    }
        argumentDocs:
            account_reference_list: '- (Optional/Computed) List of accounts associated with the project.'
            account_reference_list.#.kind: '- (Optional) The kind name. Default value is account'
            account_reference_list.#.name: '- (Optional/Computed) The name of an account.'
            account_reference_list.#.uuid: '- (Required) The UUID of an account.'
            acp: '- (Optional) The list of ACPs to be attached to the users belonging to a project. It is mandate to provide cluster_uuid while using ACP. It helps to get the context list based on user role.'
            acp.#.description: '-  The description of the association of a role to a user in a given context.'
            acp.#.name: '- (Required) Name of the Access Control Policy.'
            acp.#.role_reference: '- Reference to a role.'
            acp.#.role_reference.kind: '- The kind name. Default value is role'
            acp.#.role_reference.name: '- (Optional/Computed) The name of a role.'
            acp.#.role_reference.uuid: '- (Required) The UUID of a role'
            acp.#.user_group_reference_list: '- The User group(s) being assigned a given role'
            acp.#.user_group_reference_list.#.kind: '- The kind name. Default value is user_group'
            acp.#.user_group_reference_list.#.name: '- (Optional/Computed) The name of a user group.'
            acp.#.user_group_reference_list.#.uuid: '- (Required) The UUID of a user group'
            acp.#.user_reference_list: '- The User(s) being assigned a given role.'
            acp.#.user_reference_list.#.kind: '- The kind name. Default value is user'
            acp.#.user_reference_list.#.name: '- (Optional/Computed) The name of a user.'
            acp.#.user_reference_list.#.uuid: '- (Required) The UUID of a user'
            categories: ': - (Optional) The category values represented as a dictionary of key -> list of values.'
            cluster_reference_list: '- (Optional/Computed) List of clusters associated with the project..'
            cluster_reference_list.#.kind: '- (Optional) The kind name. Default value is cluster'
            cluster_reference_list.#.name: '- (Optional/Computed) The name of a cluster.'
            cluster_reference_list.#.uuid: '- (Required) The UUID of a cluster'
            cluster_uuid: '- (Optional) The UUID of cluster. (Required when using project_internal flag).'
            collection: ': - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.'
            context_filter_list: '- The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list.'
            creation_time: '- UTC date and time in RFC-3339 format when the project was created.'
            default_environment_reference: '- (Optional/Computed) Reference to a environment.'
            default_environment_reference.kind: '- (Optional) The kind name. Default value is environment'
            default_environment_reference.name: '- (Optional/Computed) The name of a environment.'
            default_environment_reference.uuid: '- (Required) The UUID of a environment'
            default_subnet_reference: '- (Required) Reference to a subnet.'
            default_subnet_reference.kind: '- (Optional) The kind name. Default value is subnet'
            default_subnet_reference.name: '- (Optional/Computed) The name of a subnet.'
            default_subnet_reference.uuid: '- (Required) The UUID of a subnet.'
            description: '- (Required) A description for project.'
            enable_collab: '- (Optional) flag to allow collaboration of projects. (Use with project_internal flag)'
            entity_filter_expression_list: '- (Required) A list of Entity filter expressions.'
            environment_reference_list: '- (Optional/Computed) List of environments associated with the project.'
            environment_reference_list.#.kind: '- (Optional) The kind name. Default value is environment'
            environment_reference_list.#.name: '- (Optional/Computed) The name of an environment.'
            environment_reference_list.#.uuid: '- (Required) The UUID of an environment.'
            external_network_list: '- (Optional/Computed) List of external networks associated with the project.'
            external_network_list.#.name: '- (Optional/Computed) The name of a network.'
            external_network_list.#.uuid: '- (Required) The UUID of a network.'
            external_user_group_reference_list: '- (Optional/Computed) List of directory service user groups. These groups are not managed by Nutanix.'
            external_user_group_reference_list.#.kind: '- (Optional) The kind name. Default value is user_group'
            external_user_group_reference_list.#.name: '- (Optional/Computed) The name of a user_group'
            external_user_group_reference_list.#.uuid: '- (Required) The UUID of a user_group'
            kind: '- (Required) The kind name (Default value: project).'
            last_update_time: '- UTC date and time in RFC-3339 format when the project was last updated.'
            left_hand_side: ': - (Optional)  The LHS of the filter expression - the scope type.'
            left_hand_side_entity_type: ': - (Optional)  The LHS of the filter expression - the entity type.'
            name: '- (Required) The name for the project.'
            operator: ': - (Required) The operator of the filter expression.'
            resource_domain: '- (Required) The status for a resource domain (limits and values)'
            resource_domain.resources: '- (Required) Array of the utilization/limit for resource types'
            resource_domain.resources.#.limit: '- (Required) The resource consumption limit (unspecified is unlimited)'
            resource_domain.resources.#.resource_type: '- (Required) The type of resource (for example storage, CPUs)'
            resource_domain.resources.#.units: '- The units of the resource type'
            resource_domain.resources.#.value: '- The amount of resource consumed'
            right_hand_side: ': - (Required) The right hand side (RHS) of an scope expression.'
            role_reference: '- Reference to role.'
            scope_filter_expression_list: ': - (Optional) Filter the scope of an Access Control Policy.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: '- Hash of the spec. This will be returned from server.'
            spec_version: '- Version number of the latest spec.'
            subnet_reference_list: '- (Optional/Computed) List of subnets for the project.'
            subnet_reference_list.#.kind: '- (Optional) The kind name. Default value is subnet'
            subnet_reference_list.#.name: '- (Optional/Computed) The name of a subnet.'
            subnet_reference_list.#.uuid: '- (Required) The UUID of a subnet'
            tunnel_reference_list: '- (Optional/Computed) List of tunnels associated with the project.'
            tunnel_reference_list.#.kind: '- (Optional) The kind name. Default value is tunnel'
            tunnel_reference_list.#.name: '- (Optional/Computed) The name of a tunnel.'
            tunnel_reference_list.#.uuid: '- (Required) The UUID of a tunnel'
            use_project_internal: '- (Optional) flag to use project internal for user role mapping'
            user_group: '- (Optional) The list of user group specification to be associated with the project. It is only Required when user group is not added in the PC.'
            user_group.#.directory_service_ou: '- (Optional) A Directory Service user group.'
            user_group.#.directory_service_ou.distinguished_name: '-  (Required) The Distinguished name for the user group.'
            user_group.#.directory_service_user_group: '- (Optional) A Directory Service user group.'
            user_group.#.directory_service_user_group.distinguished_name: '-  (Required) The Distinguished name for the user group.'
            user_group.#.metadata: '- (Required) Metadata Reference for user group'
            user_group.#.metadata.Kind: '- Kind of the USER Group.'
            user_group.#.metadata.uuid: '- (Required) UUID of the USER Group'
            user_group.#.saml_user_group: '- (Optional) A SAML Service user group.'
            user_group.#.saml_user_group.idp_uuid: '- (Required) The UUID of the Identity Provider that the group belongs to.'
            user_group.#.saml_user_group.name: '- (Required) The name of the SAML group which the IDP provides as attribute in SAML response.'
            user_group_reference_list: '- List of Reference of users groups.'
            user_list: '- (Optional) The list of user specification to be associated with the project. It is only required when user is not added in the PC.'
            user_list.#.directory_service_user: '- (Optional) A Directory Service user.'
            user_list.#.directory_service_user.directory_service_reference: '- (Required) Reference to a directory_service .'
            user_list.#.directory_service_user.directory_service_reference.kind: '- (Optional) The kind to a directory_service.'
            user_list.#.directory_service_user.directory_service_reference.uuid: '- (Required) The uuid to a directory_service.'
            user_list.#.directory_service_user.user_principal_name: '- (Required) The UserPrincipalName of the user from the directory service.'
            user_list.#.identity_provider_user: '- (Optional) An Identity Provider user.'
            user_list.#.identity_provider_user.identity_provider_reference: '- (Required) The reference to a identity_provider.'
            user_list.#.identity_provider_user.identity_provider_reference.kind: '- (Optional) The kind to a identity_provider.'
            user_list.#.identity_provider_user.identity_provider_reference.uuid: '- (Required) The uuid to a identity_provider.'
            user_list.#.identity_provider_user.username: '- (Required) The username from the identity provider. Name Id for SAML Identity Provider.'
            user_list.#.metadata: '- (Required) Metadata Reference for user'
            user_list.#.metadata.Kind: '- Kind of the USER.'
            user_list.#.metadata.uuid: '- (Required) UUID of the USER'
            user_reference_list: '- (Optional/Computed) List of users in the project.'
            user_reference_list.user_reference_list.#.kind: '- (Optional) The kind name. Default value is user'
            user_reference_list.user_reference_list.#.name: '- (Optional/Computed) The name of a user.'
            user_reference_list.user_reference_list.#.uuid: '- (Required) The UUID of a user'
            uuid: '- Project UUID.'
            uuid_list: ': - (Optional) The explicit list of UUIDs for the given kind.'
            value: '- value of the key.'
            vpc_reference_list: '- (Optional/Computed) List of VPCs associated with the project..'
            vpc_reference_list.#.kind: '- (Optional) The kind name. Default value is vpc'
            vpc_reference_list.#.name: '- (Optional/Computed) The name of a vpc.'
            vpc_reference_list.#.uuid: '- (Required) The UUID of a vpc'
        importStatements: []
    nutanix_protection_rule:
        subCategory: ""
        description: Provides a Nutanix Category key resource to Create a Protection Rule.
        name: nutanix_protection_rule
        title: nutanix_protection_rule
        examples:
            - name: protection_rule_test
              manifest: |-
                {
                  "availability_zone_connectivity_list": [
                    {
                      "snapshot_schedule_list": [
                        {
                          "local_snapshot_retention_policy": [
                            {
                              "num_snapshots": 1
                            }
                          ],
                          "recovery_point_objective_secs": 3600,
                          "snapshot_type": "CRASH_CONSISTENT"
                        }
                      ]
                    }
                  ],
                  "category_filter": [
                    {
                      "params": [
                        {
                          "name": "Environment",
                          "values": [
                            "Dev"
                          ]
                        }
                      ]
                    }
                  ],
                  "description": "test",
                  "name": "test",
                  "ordered_availability_zone_list": [
                    {
                      "availability_zone_url": "ab788130-0820-4d07-a1b5-b0ba4d3a42asd"
                    }
                  ]
                }
        argumentDocs:
            availability_zone_connectivity_list: '- (Required) This encodes the datapipes between various availability zones and\nthe backup policy of the pipes.'
            availability_zone_connectivity_list.destination_availability_zone_index: '- (Optional/Computed) Index of the availability zone.'
            availability_zone_connectivity_list.snapshot_schedule_list: '- (Optional/Computed) Snapshot schedules for the pair of the availability zones.'
            availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs: '- (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.'
            availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy: '- (Optional/Computed) This describes the snapshot retention policy for this availability zone.'
            availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots: '- (Optional/Computed) Number of snapshots need to be retained.'
            availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple: '- (Optional/Computed) Multiplier to ''snapshot_interval_type''.'
            ? availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type
            : '- (Optional/Computed)'
            availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs: '- (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.'
            availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy: '- (Optional/Computed) This describes the snapshot retention policy for this availability zone.'
            availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type: '- (Optional/Computed) Crash consistent or Application Consistent snapshot.'
            availability_zone_connectivity_list.source_availability_zone_index: '- (Optional/Computed) Index of the availability zone.'
            category_filter: '- (Optional/Computed)'
            category_filter.0.kind_list: '- (Optional/Computed) List of kinds associated with this filter.'
            category_filter.0.params: '- (Optional/Computed) A list of category key and list of values.'
            category_filter.0.type: '- (Optional/Computed) The type of the filter being used.'
            creation_time: '- UTC date and time in RFC-3339 format when vm was created.'
            description: '- (Required) A description for protection rule.'
            kind: '- (Required) The kind name (Default value: project).'
            last_update_time: '- UTC date and time in RFC-3339 format when vm was last updated.'
            name: '- (Required) The name for the protection rule.'
            ordered_availability_zone_list: '- (Required) A list of availability zones, each of which, receives a replica\nof the data for the entities protected by this protection rule.'
            ordered_availability_zone_list.#.availability_zone_url: '- (Optional/Computed) The FQDN or IP address of the availability zone.'
            ordered_availability_zone_list.#.cluster_uuid: '- (Optional/Computed) UUID of specific cluster to which we will be replicating.'
            spec_hash: '- Hash of the spec. This will be returned from server.'
            spec_version: '- Version number of the latest spec.'
            uuid: '- vm UUID.'
            value: '- value of the key.'
        importStatements: []
    nutanix_recovery_plan:
        subCategory: ""
        description: Provides a Nutanix Category key resource to Create a Recovery Plan.
        name: nutanix_recovery_plan
        title: nutanix_recovery_plan
        examples:
            - name: recovery_plan_test
              manifest: |-
                {
                  "description": "%s",
                  "name": "%s",
                  "parameters": [
                    {}
                  ],
                  "stage_list": [
                    {
                      "delay_time_secs": 0,
                      "stage_uuid": "ab788130-0820-4d07-a1b5-b0ba4d3a42asd",
                      "stage_work": [
                        {
                          "recover_entities": [
                            {
                              "entity_info_list": [
                                {
                                  "categories": [
                                    {
                                      "name": "Environment",
                                      "value": "Dev"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            creation_time: '- UTC date and time in RFC-3339 format when vm was created.'
            description: '- (Required) A description for Recovery Plan.'
            kind: '- (Required) The kind name (Default value: project).'
            last_update_time: '- UTC date and time in RFC-3339 format when vm was last updated.'
            name: '- (Required) The name for the Recovery Plan.'
            parameters: '- (Required) Parameters for the Recovery Plan.'
            parameters.0.floating_ip_assignment_list: '- (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.'
            parameters.0.floating_ip_assignment_list.#.availability_zone_url: '- (Required) URL of the Availability Zone.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list: '- (Required) IP assignment for VMs upon recovery in the specified Availability Zone.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config: '- (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip: '- (Optional/Computed) IP to be assigned to VM, in case of failover.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically: '- (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config: '- (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip: '- (Optional/Computed) IP to be assigned to VM, in case of failover.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically: '- (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information: '- (Required) Information about vnic to which floating IP has to be assigned.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip: '- (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid: '- (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference: '- (Required) Reference to a vm.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind: '- (Required) The kind name.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name: '- (Optional/Computed) The name.'
            parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid: '- (Required) The uuid.'
            parameters.0.network_mapping_list: '- (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list: '- (Required) Mapping of networks across the Availability Zones.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url: '- (Optional/Computed) URL of the Availability Zone.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list: '- (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind: '- (Optional/Computed) The kind name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid: '- (Optional/Computed) The uuid.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list: '- (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list: '- (Optional/Computed) List of IP configurations for a VM.'
            ? parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address
            : '- (Required) IP address.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference: '- (Optional/Computed) The reference to a vm.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind: '- (Optional/Computed) The kind name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name: '- (Optional/Computed) The name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid: '- (Optional/Computed) The uuid.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network: '- (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name: '- (Required) Name of the network.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list: '- (Optional/Computed) List of subnets for the network.'
            ? parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state
            : '- (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip: '- (Required) Gateway IP address for the subnet.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length: '- (Required) Prefix length for the subnet.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference: '- (Optional/Computed) The reference to a VPC.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference: '- (Optional/Computed) The reference to a virtual_network.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind: '- (Optional/Computed) The kind name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name: '- (Optional/Computed) The name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid: '- (Optional/Computed) The uuid.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference: '- (Optional/Computed) The reference to a VPC.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind: '- (Optional/Computed) The kind name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name: '- (Optional/Computed) The name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid: '- (Optional/Computed) The uuid.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list: '- (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list: '- (Optional/Computed) List of IP configurations for a VM.'
            ? parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address
            : '- (Required) IP address.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name: '- (Optional/Computed) The name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference: '- (Optional/Computed) The reference to a vm.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind: '- (Optional/Computed) The kind name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name: '- (Optional/Computed) The name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid: '- (Optional/Computed) The uuid.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network: '- (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name: '- (Required) Name of the network.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list: '- (Optional/Computed) List of subnets for the network.'
            ? parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state
            : '- (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip: '- (Required) Gateway IP address for the subnet.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length: '- (Required) Prefix length for the subnet.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference: '- (Optional/Computed) The reference to a virtual_network.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind: '- (Optional/Computed) The kind name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name: '- (Optional/Computed) The name.'
            parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid: '- (Optional/Computed) The uuid.'
            spec_hash: '- Hash of the spec. This will be returned from server.'
            spec_version: '- Version number of the latest spec.'
            stage_list: '- (Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.'
            stage_list.delay_time_secs: '- (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.'
            stage_list.stage_uuid: '- (Optional/Computed) UUID of stage.'
            stage_list.stage_work: '- (Required) A stage specifies the work to be performed when the Recovery Plan is executed.'
            stage_list.stage_work.0.recover_entities: '- (Optional/Computed) Information about entities to be recovered.'
            stage_list.stage_work.0.recover_entities.0.entity_info_list: '- (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.'
            stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind: '- (Optional/Computed) Reference to a kind.'
            stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name: '- (Optional/Computed) Reference to a name.'
            stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid: '- (Optional/Computed) Reference to a uuid.'
            stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories: '- (Optional/Computed)  Categories for filtering entities.'
            uuid: '- vm UUID.'
            value: '- value of the key.'
        importStatements: []
    nutanix_role:
        subCategory: ""
        description: This operation submits a request to create a role based on the input parameters.
        name: nutanix_role
        title: nutanix_role
        examples:
            - name: test
              manifest: |-
                {
                  "description": "DESCRIPTION",
                  "name": "NAME",
                  "permission_reference_list": [
                    {
                      "kind": "permission",
                      "uuid": "ID OF PERMISSION"
                    },
                    {
                      "kind": "permission",
                      "uuid": "ID OF PERMISSION"
                    },
                    {
                      "kind": "permission",
                      "uuid": "ID OF PERMISSION"
                    }
                  ]
                }
        argumentDocs:
            api_version: '- The version of the API.'
            categories: ': - (Optional) Categories for the role.'
            creation_time: ': - UTC date and time in RFC-3339 format when role was created.'
            description: ': - (Optional) The description of the role.'
            kind: ': - The kind name (Default value: project)(Required).'
            last_update_time: ': - UTC date and time in RFC-3339 format when role was last updated.'
            metadata: ': - The role kind metadata.'
            name: ': - (Optional) Name of the role.'
            owner_reference: ': - (Optional) The reference to a user.'
            permission_reference_list: ': - (Required) List of permission references.'
            project_reference: ': - (Optional) The reference to a project.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - The state of the role.'
            uuid: ': - Role UUID.'
            value: ': - value of the key.'
        importStatements: []
    nutanix_service_group:
        subCategory: ""
        description: This operation submits a request to create a service group based on the input parameters.
        name: nutanix_service_group
        title: nutanix_service_group
        examples:
            - name: test
              manifest: |-
                {
                  "description": "this is service group",
                  "name": "test_service_gp",
                  "service_list": [
                    {
                      "protocol": "TCP",
                      "tcp_port_range_list": [
                        {
                          "end_port": 22,
                          "start_port": 22
                        },
                        {
                          "end_port": 2222,
                          "start_port": 2222
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            code: ': - (Optional) Code as text'
            description: ': - (Optional) Description of the service group'
            end_port: '- (Optional) End Port (Int)'
            icmp_type_code_list: ': - (Optional) ICMP type code list'
            name: ': - (Required) Name of the service group'
            protocol: ': - (Optional) The UserPrincipalName of the user from the directory service.'
            service_list: ': - (Required) list of services which have protocol (TCP / UDP / ICMP) along with port details'
            start_port: ': - (Optional) Start Port (Int)'
            system_defined: ': - (ReadOnly) boolean value to denote if the service group is system defined'
            tcp_port_range_list: ': - (Optional) TCP Port range list'
            type: ': - (Optional) Type as text'
            udp_port_range_list: ': - (Optional) UDP port range list'
        importStatements: []
    nutanix_static_routes:
        subCategory: ""
        description: Create Static Routes within VPCs .
        name: nutanix_static_routes
        title: nutanix_static_routes
        examples:
            - name: scn
              manifest: |-
                {
                  "static_routes_list": [
                    {
                      "destination": "10.x.x.x/x",
                      "external_subnet_reference_uuid": "{{ext_subnet_uuid}}"
                    }
                  ],
                  "vpc_uuid": "{{vpc_uuid}}"
                }
            - name: scn
              manifest: |-
                {
                  "default_route_nexthop": [
                    {
                      "external_subnet_reference_uuid": "{{ext_subnet_uuid}}"
                    }
                  ],
                  "static_routes_list": [
                    {
                      "destination": "10.x.x.x/x",
                      "external_subnet_reference_uuid": "{{ext_subnet_uuid}}"
                    }
                  ],
                  "vpc_name": "{{vpc_name}}"
                }
            - name: scn
              manifest: |-
                {
                  "vpc_uuid": "{{vpc_uuid}}"
                }
        argumentDocs:
            UUID: ': - subnet UUID.'
            api_version: '- The version of the API.'
            creation_time: ': - UTC date and time in RFC-3339 format when subnet was created.'
            default_route_nexthop: '- (Optional) Default Route'
            default_route_nexthop.external_subnet_reference_uuid: '- (Required) Reference to a subnet.'
            last_update_time: ': - UTC date and time in RFC-3339 format when subnet was last updated.'
            metadata: '- The vpc_route_table kind metadata.'
            name: ': - subnet name.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            static_routes_list: '- (Optional) Static Routes.'
            static_routes_list.destination: '- (Required) Destination ip with prefix.'
            static_routes_list.external_subnet_reference_uuid: '- (Optional) Reference to a subnet. Supported with 2022.x .'
            static_routes_list.vpn_connection_reference_uuid: '- (Optional) Reference to a vpn connection.'
            vpc_name: '- (Required) vpc Name. Should not be used with vpc_uuid.'
            vpc_uuid: '- (Required) Reference to a VPC UUID. Should not be used with vpc_name.'
        importStatements: []
    nutanix_subnet:
        subCategory: ""
        description: This operation submits a request to create a subnet based on the input parameters. A subnet is a block of IP addresses.
        name: nutanix_subnet
        title: nutanix_subnet
        examples:
            - name: next-iac-managed
              manifest: |-
                {
                  "cluster_uuid": "${data.nutanix_clusters.clusters.entities.0.metadata.uuid}",
                  "default_gateway_ip": "10.5.80.1",
                  "dhcp_domain_name_server_list": [
                    "8.8.8.8",
                    "4.2.2.2"
                  ],
                  "dhcp_domain_search_list": [
                    "nutanix.com",
                    "eng.nutanix.com"
                  ],
                  "name": "next-iac-managed-example",
                  "prefix_length": 20,
                  "subnet_ip": "10.5.80.0",
                  "subnet_type": "VLAN",
                  "vlan_id": 101
                }
        argumentDocs:
            api_version: '- The version of the API.'
            availability_zone_reference: ': - (Optional) The reference to a availability_zone.'
            categories: ': - (Optional) The categories of the resource.'
            cluster_uuid: ': - (Required) The UUID of the cluster.'
            creation_time: ': - UTC date and time in RFC-3339 format when subnet was created.'
            default_gateway_ip: ': - (Optional) Default gateway IP address.'
            description: ': - (Optional) A description for subnet.'
            dhcp_domain_name_server_list: ': - (Optional). List of Domain Name Server addresses .'
            dhcp_domain_search_list: ': - (Optional).The DNS domain search list .'
            dhcp_options: ': - (Optional) Spec for defining DHCP options.'
            dhcp_server_address: ': - (Optional) Host address.'
            dhcp_server_address_port: ': - (Optional) Port Number.'
            enable_nat: ': - (Optional) Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.'
            ip_config_pool_list_ranges: ': -(Optional) Range of IPs.'
            is_external: ': - (Optional) Whether the subnet is external subnet or not.'
            kind: ': - The kind name (Default value: project)(Required).'
            last_update_time: ': - UTC date and time in RFC-3339 format when subnet was last updated.'
            metadata: ': - (Required) The subnet kind metadata.'
            name: ': - (Optional) Subnet name (Readonly).'
            network_function_chain_reference: ': - (Optional) The reference to a network_function_chain.'
            owner_reference: ': - (Optional) The reference to a user.'
            prefix_length: ': - (Optional).'
            project_reference: ': - (Optional) The reference to a project.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - The state of the subnet.'
            subnet_ip: ': - (Optional) Subnet IP address.'
            subnet_type: ': - (Optional). Valid Types are ["VLAN", "OVERLAY"]'
            uuid: ': - The subnet UUID.'
            value: ': - value of the key.'
            vlan_id: ': - (Optional). For VLAN subnet.'
            vpc_reference_uuid: ': (Optional) VPC reference uuid'
            vswitch_name: ': - (Optional).'
        importStatements: []
    nutanix_user:
        subCategory: ""
        description: This operation submits a request to create a user based on the input parameters.
        name: nutanix_user
        title: nutanix_user
        examples:
            - name: user
              manifest: |-
                {
                  "directory_service_user": [
                    {
                      "directory_service_reference": [
                        {
                          "uuid": "\u003cdirectory-service-uuid\u003e"
                        }
                      ],
                      "user_principal_name": "test-user@ntnxlab.local"
                    }
                  ]
                }
            - name: user
              manifest: |-
                {
                  "identity_provider_user": [
                    {
                      "identity_provider_reference": [
                        {
                          "uuid": "\u003cidentity-provider-uuid\u003e"
                        }
                      ],
                      "username": "username"
                    }
                  ]
                }
        argumentDocs:
            access_control_policy_reference_list: ': - List of ACP references. See #reference for more details.'
            api_version: '- The version of the API.'
            categories: ': - (Optional) Categories for the Access Control Policy.'
            creation_time: ': - UTC date and time in RFC-3339 format when vm was created.'
            directory_service_reference: ': - (Optional) The reference to a directory service. See #reference for to look the supported attributes.'
            directory_service_user: ': - (Optional) The directory service user configuration. See below for more information.'
            display_name: ': - The display name of the user (common name) provided by the directory service.'
            entity_filter_expression_list: '- (Required) A list of Entity filter expressions.'
            identity_provider_reference: ': - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.'
            identity_provider_user: ': - (Optional) (Optional) The identity provider user configuration. See below for more information.'
            kind: ': - The kind name. (Default depends on the resource you are referencing)'
            last_update_time: ': - UTC date and time in RFC-3339 format when vm was last updated.'
            metadata: ': - The vm kind metadata.'
            name: ': - The name of the user.'
            owner_reference: ': - (Optional) The reference to a user.'
            project_reference: ': - (Optional) The reference to a project.'
            project_reference_list: ': - A list of projects the user is part of. See #reference for more details.'
            scope_filter_expression_list: ': - (Optional) The device ID which is used to uniquely identify this particular disk.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - The state of the entity.'
            user_principal_name: ': - (Optional) The UserPrincipalName of the user from the directory service.'
            user_type: ': - The name of the user.'
            username: ': - (Optional) The username from identity provider. Name ID for SAML Identity Provider.'
            uuid: ': - vm UUID.'
            value: ': - value of the key.'
        importStatements: []
    nutanix_user_groups:
        subCategory: ""
        description: This operation add a User group to the system.
        name: nutanix_user_groups
        title: nutanix_user_groups
        examples:
            - name: user_grp
              manifest: |-
                {
                  "directory_service_user_group": [
                    {
                      "distinguished_name": "\u003cdistinguished name for the user group\u003e"
                    }
                  ]
                }
            - name: user_grp
              manifest: |-
                {
                  "saml_user_group": [
                    {
                      "idp_uuid": "\u003cidp uuid of the group\u003e",
                      "name": "\u003cname of saml group\u003e"
                    }
                  ]
                }
        argumentDocs:
            UUID: ': - subnet UUID.'
            api_version: '- The version of the API.'
            creation_time: ': - UTC date and time in RFC-3339 format when subnet was created.'
            directory_service_ou: ': - (Optional) A Directory Service organizational unit.'
            directory_service_user_group: ': - (Optional) A Directory Service user group.'
            distinguished_name: ': - (Required) The Distinguished name for the user group.'
            last_update_time: ': - UTC date and time in RFC-3339 format when subnet was last updated.'
            metadata: '- The user_group kind metadata.'
            name: ': - subnet name.'
            saml_user_group: ': - (Optional) A SAML Service user group.'
            saml_user_group.idp_uuid: :- (Required) The UUID of the Identity Provider that the group belongs to.
            saml_user_group.name: :- (Required) The name of the SAML group which the IDP provides.
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
        importStatements: []
    nutanix_virtual_machine:
        subCategory: ""
        description: Provides a Nutanix Virtual Machine resource to Create a virtual machine.
        name: nutanix_virtual_machine
        title: nutanix_virtual_machine
        examples:
            - name: vm1
              manifest: |-
                {
                  "categories": [
                    {
                      "name": "Environment",
                      "value": "Staging"
                    }
                  ],
                  "cluster_uuid": "${data.nutanix_clusters.clusters.entities.0.metadata.uuid}",
                  "memory_size_mib": 2048,
                  "name": "test-dou",
                  "num_sockets": 1,
                  "num_vcpus_per_socket": 1
                }
              references:
                cluster_uuid: data.nutanix_clusters.clusters.entities.0.metadata.uuid
            - name: vm
              manifest: |-
                {
                  "cluster_uuid": "${data.nutanix_clusters.clusters.entities.0.metadata.uuid}",
                  "disk_list": [
                    {
                      "disk_size_bytes": 68157440,
                      "disk_size_mib": 65,
                      "storage_config": [
                        {
                          "storage_container_reference": [
                            {
                              "kind": "storage_container",
                              "uuid": "2bbe67bc-fd14-4637-8de1-6379257f4219"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "memory_size_mib": 186,
                  "name": "myVm",
                  "num_sockets": 1,
                  "num_vcpus_per_socket": 1
                }
              references:
                cluster_uuid: data.nutanix_clusters.clusters.entities.0.metadata.uuid
        argumentDocs:
            FRESH: is done when sysprep is used to install Windows from ISO and file name it is searching autounattend.xml for unattend_xml parameter
            PREPARED: is done when sysprep is used to finalize Windows installation from an installed Windows and file name it is searching unattend.xml for unattend_xml parameter
            adapter_type: ': - (Optional) The adapter type of the disk address.'
            api_version: '- The version of the API.'
            availability_zone_reference: ': - (Optional) The reference to a availability_zone.'
            available_version: ': - (ReadOnly) Version of Nutanix Guest Tools available on the cluster.'
            boot_device_disk_address: ': - (Optional) Address of disk to boot from.'
            boot_device_mac_address: ': - (Optional) MAC address of nic to boot from.'
            boot_device_order_list: ': - (Optional) Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.'
            boot_type: ': - (Optional) Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".'
            categories: ': - (Optional) Categories for the vm.'
            cluster_name: ': - The name of the cluster.'
            cluster_uuid: ': - (Required) The UUID of the cluster.'
            creation_time: ': - UTC date and time in RFC-3339 format when vm was created.'
            data_source_reference: '- Reference to a data source.'
            description: ': - (Optional) A description for vm.'
            device_id: ': - (Computed) The device ID of the GPU.'
            device_index: ': - (Optional) The index of the disk address.'
            device_properties: '- Properties to a device.'
            device_type: ': - A Disk type (default: DISK).'
            disk_address: ': - Address of disk to boot from.'
            disk_list: Disks attached to the VM.
            disk_size_bytes: '- (Optional) Size of the disk in Bytes.'
            disk_size_mib: '- Size of the disk in MiB. Must match the size specified in ''disk_size_bytes'' - rounded up to the nearest MiB - when that field is present.'
            enable_cpu_passthrough: ': - (Optional) Add true to enable CPU passthrough.'
            enable_script_exec: ': - (Optional) Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.'
            flash_mode: ': - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.'
            floating_ip: ': -  The Floating IP associated with the vnic. (Only in nic_list_status)'
            fraction: '- (ReadOnly) Fraction of the physical GPU assigned.'
            frame_buffer_size_mib: ': - (ReadOnly) GPU frame buffer size in MiB.'
            gpu_list: ': - (Optional) GPUs attached to the VM.'
            guest_customization_cloud_init_custom_key_values: ': - (Optional) Generic key value pair used for custom attributes in cloud init.'
            guest_customization_cloud_init_meta_data: '- (Optional) The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.'
            guest_customization_cloud_init_user_data: ': - (Optional) The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.'
            guest_customization_is_overridable: ': - (Optional) Flag to allow override of customization by deployer.'
            guest_customization_sysprep: ': - (Optional) VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if "override_script" is set to "True" then the deployer can upload their own custom script.'
            guest_customization_sysprep_custom_key_values: ': - (Optional) Generic key value pair used for custom attributes in sysprep.'
            guest_driver_version: ': - (ReadOnly) Last determined guest driver version.'
            guest_os_id: ': - (Optional) Guest OS Identifier. For ESX, refer to VMware documentation link for the list of guest OS identifiers.'
            guest_os_version: ': - (ReadOnly) Version of the operating system on the VM.'
            hardware_clock_timezone: ': - (Optional) VM''s hardware clock timezone in IANA TZDB format (America/Los_Angeles).'
            host_reference: ': - Reference to a host.'
            hypervisor_type: ': - The hypervisor type for the hypervisor the VM is hosted on.'
            index: ': - Index of the serial port (int).'
            install_type: |-
                : - (Optional) Whether the guest will be freshly installed using this unattend configuration, or whether this unattend configuration will be applied to a pre-prepared image. Default is PREPARED.
                Valid values are:
            ip_endpoint_list: ': - IP endpoints for the adapter. Currently, IPv4 addresses are supported.'
            ip_endpoint_list.ip: ': - Address string.'
            ip_endpoint_list.type: ': - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)'
            is_connected: ': - Indicates whether the serial port connection is connected or not (true or false).'
            is_reachable: ': - (ReadOnly) Communication from VM to CVM is active or not.'
            is_vcpu_hard_pinned: ': - (Optional) Add true to enable CPU pinning.'
            iso_mount_state: ': - (Optional) Desired mount state of Nutanix Guest Tools ISO.'
            kind: ': - The kind name (Default value: project)(Required).'
            last_update_time: ': - UTC date and time in RFC-3339 format when vm was last updated.'
            mac_address: ': - The MAC address for the adapter.'
            machine_type: ': - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.'
            memory_size_mib: ': - (Optional) Memory size in MiB. On updating memory to powered ON VMs should only be done in 1GB increments.'
            metadata: ': - The vm kind metadata.'
            mode: ': - (Optional) The mode of this GPU.'
            model: ': - The model of this NIC. (Options : VIRTIO , E1000).'
            name: ': - (Required) The name for the vm.'
            network_function_chain_reference: ': - The reference to a network_function_chain.'
            network_function_nic_type: ': - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).'
            ngt_credentials: ': - (Ooptional) Credentials to login server.'
            ngt_enabled_capability_list: '- (Optional) Application names that are enabled.'
            ngt_state: ': - (Optional) Nutanix Guest Tools is enabled or not.'
            nic_list: ': - (Optional) Spec NICs attached to the VM.'
            nic_list_status: ': - Status NICs attached to the VM.'
            nic_type: ': - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).'
            num_queues: ': - The number of tx/rx queue pairs for this NIC.'
            num_sockets: ': - (Optional) Number of vCPU sockets.'
            num_threads_per_core: ': - (Optional) Number of threads per core.'
            num_vcpus_per_socket: ': - (Optional) Number of vCPUs per socket.'
            num_virtual_display_heads: ': - (ReadOnly) Number of supported virtual display heads.'
            num_vnuma_nodes: ': - (Optional) Number of vNUMA nodes. 0 means vNUMA is disabled.'
            nutanix_guest_tools: ': - (Optional) Information regarding Nutanix Guest Tools.'
            owner_reference: ': - (Optional) The reference to a user.'
            parent_reference: ': - (Optional) Reference to an entity that the VM cloned from.'
            pci_address: '- (ReadOnly) GPU {segment:bus:device:function} (sbdf) address if assigned.'
            power_state: ': - (Optional) The current or desired power state of the VM. (Options : ON , OFF)'
            power_state_mechanism: ': - (Optional) Indicates the mechanism guiding the VM power state transition. Currently used for the transition to "OFF" state. Power state mechanism (ACPI/GUEST/HARD).'
            project_reference: ': - (Optional) The reference to a project.'
            serial_port_list: ': - (Optional) Serial Ports configured on the VM.'
            should_fail_on_script_failure: ': - (Optional)  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
            state: ': - (Optional) Nutanix Guest Tools is enabled or not.'
            storage_container_reference: ': - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.'
            storage_container_reference.#.kind: ': - kind of the container reference'
            storage_container_reference.#.name: ': - name of the container reference'
            storage_container_reference.#.url: ': - GET query on the URL will provide information on the source.'
            storage_container_reference.#.uuid: ': - uiid of the container reference'
            subnet_name: ': - The name of the subnet reference to.'
            subnet_uuid: ': - The reference to a subnet.'
            unattend_xml: ': - (Optional) Generic key value pair used for custom attributes.'
            use_hot_add: ': - (Optional) Use Hot Add when modifying VM resources. Passing value false will result in VM reboots. Default value is true.'
            uuid: ': - (Optional) The device ID which is used to uniquely identify this particular disk.'
            value: ': - value of the key.'
            vendor: ': - (Optional) The vendor of the GPU.'
            version: ': - (ReadOnly) Version of Nutanix Guest Tools installed on the VM.'
            vga_console_enabled: ': - (Optional) Indicates whether VGA console should be enabled or not.'
            vm_mobility_drivers_installed: ': - (ReadOnly) Whether VM mobility drivers are installed in the VM.'
            vss_snapshot_capable: ': - (ReadOnly) Whether the VM is configured to take VSS snapshots through NGT.'
        importStatements: []
    nutanix_vpc:
        subCategory: ""
        description: Create Virtual Private Cloud .
        name: nutanix_vpc
        title: nutanix_vpc
        examples:
            - name: vpc
              manifest: |-
                {
                  "common_domain_name_server_ip_list": [
                    {
                      "ip": "8.8.8.8"
                    },
                    {
                      "ip": "8.8.8.9"
                    }
                  ],
                  "external_subnet_reference_name": [
                    "test-Ext1",
                    "test-ext2"
                  ],
                  "externally_routable_prefix_list": [
                    {
                      "ip": "192.43.0.0",
                      "prefix_length": 16
                    }
                  ],
                  "name": "testtNew-1"
                }
            - name: vpc
              manifest: |-
                {
                  "common_domain_name_server_ip_list": [
                    {
                      "ip": "8.8.8.8"
                    }
                  ],
                  "external_subnet_reference_uuid": [
                    ""
                  ],
                  "externally_routable_prefix_list": [
                    {
                      "ip": "192.43.0.0",
                      "prefix_length": 16
                    },
                    {
                      "ip": "192.42.0.0",
                      "prefix_length": 16
                    }
                  ],
                  "name": "testtNew-1"
                }
        argumentDocs:
            UUID: ': - subnet UUID.'
            api_version: '- The version of the API.'
            common_domain_name_server_ip_list: '- (Optional) List of domain name server IPs.'
            common_domain_name_server_ip_list.ip: '- (Required) ip address.'
            creation_time: ': - UTC date and time in RFC-3339 format when subnet was created.'
            external_subnet_list_status: '- Status of List of external subnets attached to this VPC'
            external_subnet_reference_name: '- (Optional) List of external subnets name attached to this VPC. Should not be used with external_subnet_reference_uuid.'
            external_subnet_reference_uuid: '- (Optional) List of external subnets uuid attached to this VPC. Should not be used with external_subnet_reference_name.'
            externally_routable_prefix_list: '- (Optional) List Externally Routable IP Addresses. Required when external subnet with NoNAT is used.'
            externally_routable_prefix_list.ip: '- (Required) The name for the VPC.'
            externally_routable_prefix_list.prefix_length: '- (Required) prefix length.'
            last_update_time: ': - UTC date and time in RFC-3339 format when subnet was last updated.'
            metadata: '- The vpc kind metadata.'
            name: '- (Required) The name for the VPC.'
            should_force_translate: ': - Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.'
            spec_hash: ': - Hash of the spec. This will be returned from server.'
            spec_version: ': - Version number of the latest spec.'
        importStatements: []
